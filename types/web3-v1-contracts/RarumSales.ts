/* Autogenerated file. Do not edit manually. */
// @ts-nocheck
/* tslint:disable */
/* eslint-disable */

import type BN from "bn.js";
import type { ContractOptions } from "web3-eth-contract";
import type { EventLog } from "web3-core";
import type { EventEmitter } from "events";
import type {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

export interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type AuthorizationUsed = ContractEventLog<{
  authorizer: string;
  nonce: string;
  0: string;
  1: string;
}>;
export type CollectionStatusChanged = ContractEventLog<{
  nft: string;
  newState: boolean;
  0: string;
  1: boolean;
}>;
export type ContractAuthorizationChanged = ContractEventLog<{
  nft: string;
  authorized: boolean;
  fee: string;
  admin: string;
  0: string;
  1: boolean;
  2: string;
  3: string;
}>;
export type ItemBought = ContractEventLog<{
  offerId: string;
  buyer: string;
  owner: string;
  price: string;
  tokenId: string;
  units: string;
  0: string;
  1: string;
  2: string;
  3: string;
  4: string;
  5: string;
}>;
export type OfferCreated = ContractEventLog<{
  index: string;
  offer: [
    string,
    string,
    string,
    string,
    string,
    string,
    string,
    string,
    boolean,
    boolean,
    string,
    [string, string, string],
    [string, string, string, string, string]
  ];
  owner: string;
  nft: string;
  lootbox: string;
  sender: string;
  0: string;
  1: [
    string,
    string,
    string,
    string,
    string,
    string,
    string,
    string,
    boolean,
    boolean,
    string,
    [string, string, string],
    [string, string, string, string, string]
  ];
  2: string;
  3: string;
  4: string;
  5: string;
}>;
export type OfferStateUpdated = ContractEventLog<{
  owner: string;
  offerId: string;
  newState: boolean;
  0: string;
  1: string;
  2: boolean;
}>;
export type PaymentTokenStatusChanged = ContractEventLog<{
  paymentToken: string;
  newState: boolean;
  0: string;
  1: boolean;
}>;
export type PriceUpdated = ContractEventLog<{
  owner: string;
  offerId: string;
  newPrice: string;
  0: string;
  1: string;
  2: string;
}>;
export type RoleAdminChanged = ContractEventLog<{
  role: string;
  previousAdminRole: string;
  newAdminRole: string;
  0: string;
  1: string;
  2: string;
}>;
export type RoleGranted = ContractEventLog<{
  role: string;
  account: string;
  sender: string;
  0: string;
  1: string;
  2: string;
}>;
export type RoleRevoked = ContractEventLog<{
  role: string;
  account: string;
  sender: string;
  0: string;
  1: string;
  2: string;
}>;
export type SoldOut = ContractEventLog<{
  offerId: string;
  timestamp: string;
  0: string;
  1: string;
}>;
export type SupplyUpdated = ContractEventLog<{
  owner: string;
  offerId: string;
  newSupply: string;
  0: string;
  1: string;
  2: string;
}>;
export type TimeUpdated = ContractEventLog<{
  owner: string;
  offerId: string;
  startTime: string;
  endTime: string;
  0: string;
  1: string;
  2: string;
  3: string;
}>;

export interface RarumSales extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): RarumSales;
  clone(): RarumSales;
  methods: {
    ADMIN_ROLE(): NonPayableTransactionObject<string>;

    DEFAULT_ADMIN_ROLE(): NonPayableTransactionObject<string>;

    DOMAIN_SEPARATOR(): NonPayableTransactionObject<string>;

    MINTER_ROLE(): NonPayableTransactionObject<string>;

    OPERATOR_ROLE(): NonPayableTransactionObject<string>;

    allowedPaymentTokens(arg0: string): NonPayableTransactionObject<boolean>;

    authorizationState(
      authorizer: string,
      authorization: string | number[]
    ): NonPayableTransactionObject<boolean>;

    authorizedCollections(arg0: string): NonPayableTransactionObject<{
      fee: string;
      metadataURI: string;
      authorized: boolean;
      created: boolean;
      0: string;
      1: string;
      2: boolean;
      3: boolean;
    }>;

    buy(
      _owner: string,
      _offerId: number | string | BN,
      _maxPrice: number | string | BN,
      _amount: number | string | BN
    ): NonPayableTransactionObject<void>;

    collectionOfferCount(_nft: string): NonPayableTransactionObject<string>;

    createAuthorizedOffer(
      _offer: [
        number | string | BN,
        number | string | BN,
        number | string | BN,
        number | string | BN,
        string,
        string,
        boolean,
        [number | string | BN, string, string],
        [
          number | string | BN,
          number | string | BN,
          string,
          string,
          number | string | BN
        ]
      ]
    ): NonPayableTransactionObject<void>;

    createOffer(
      _offer: [
        number | string | BN,
        number | string | BN,
        number | string | BN,
        number | string | BN,
        string,
        string,
        boolean,
        [number | string | BN, string, string],
        [
          number | string | BN,
          number | string | BN,
          string,
          string,
          number | string | BN
        ]
      ]
    ): NonPayableTransactionObject<void>;

    createSignedOffer(
      _offer: [
        number | string | BN,
        number | string | BN,
        number | string | BN,
        number | string | BN,
        string,
        string,
        boolean,
        [number | string | BN, string, string],
        [
          number | string | BN,
          number | string | BN,
          string,
          string,
          number | string | BN
        ]
      ],
      _authorization: [
        string | number[],
        number | string | BN,
        string,
        number | string | BN,
        string | number[],
        string | number[]
      ]
    ): NonPayableTransactionObject<void>;

    feeAddress(): NonPayableTransactionObject<string>;

    getRoleAdmin(role: string | number[]): NonPayableTransactionObject<string>;

    getRoleMember(
      role: string | number[],
      index: number | string | BN
    ): NonPayableTransactionObject<string>;

    getRoleMemberCount(
      role: string | number[]
    ): NonPayableTransactionObject<string>;

    grantRole(
      role: string | number[],
      account: string
    ): NonPayableTransactionObject<void>;

    hasRole(
      role: string | number[],
      account: string
    ): NonPayableTransactionObject<boolean>;

    initialize(
      _operator: string,
      _feeAddress: string
    ): NonPayableTransactionObject<void>;

    offchainBuy(
      _to: string,
      _offerId: number | string | BN,
      _maxPrice: number | string | BN,
      _amount: number | string | BN
    ): NonPayableTransactionObject<void>;

    offers(
      arg0: string,
      arg1: number | string | BN
    ): NonPayableTransactionObject<{
      id: string;
      supply: string;
      totalSold: string;
      maxUnitsPerPurchase: string;
      startTime: string;
      endTime: string;
      owner: string;
      metadataURI: string;
      active: boolean;
      fromTenant: boolean;
      offerType: string;
      paymentOptions: [string, string, string];
      deliveryOptions: [string, string, string, string, string];
      0: string;
      1: string;
      2: string;
      3: string;
      4: string;
      5: string;
      6: string;
      7: string;
      8: boolean;
      9: boolean;
      10: string;
      11: [string, string, string];
      12: [string, string, string, string, string];
    }>;

    offersByCollection(
      arg0: string,
      arg1: number | string | BN
    ): NonPayableTransactionObject<{
      id: string;
      supply: string;
      totalSold: string;
      maxUnitsPerPurchase: string;
      startTime: string;
      endTime: string;
      owner: string;
      metadataURI: string;
      active: boolean;
      fromTenant: boolean;
      offerType: string;
      paymentOptions: [string, string, string];
      deliveryOptions: [string, string, string, string, string];
      0: string;
      1: string;
      2: string;
      3: string;
      4: string;
      5: string;
      6: string;
      7: string;
      8: boolean;
      9: boolean;
      10: string;
      11: [string, string, string];
      12: [string, string, string, string, string];
    }>;

    offersInCollection(
      _nft: string
    ): NonPayableTransactionObject<
      [
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        boolean,
        boolean,
        string,
        [string, string, string],
        [string, string, string, string, string]
      ][]
    >;

    offersOf(
      _owner: string
    ): NonPayableTransactionObject<
      [
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        boolean,
        boolean,
        string,
        [string, string, string],
        [string, string, string, string, string]
      ][]
    >;

    ownerOfferCount(_owner: string): NonPayableTransactionObject<string>;

    renounceRole(
      role: string | number[],
      account: string
    ): NonPayableTransactionObject<void>;

    revokeRole(
      role: string | number[],
      account: string
    ): NonPayableTransactionObject<void>;

    setCollection(
      _nft: string,
      _fee: number | string | BN,
      _metadataURI: string,
      _authorized: boolean
    ): NonPayableTransactionObject<void>;

    setCollectionStatus(
      _nft: string,
      _newState: boolean
    ): NonPayableTransactionObject<void>;

    setOfferStatus(
      _owner: string,
      _offerId: number | string | BN,
      _newState: boolean
    ): NonPayableTransactionObject<void>;

    setPaymentTokenStatus(
      _paymentToken: string,
      _newState: boolean
    ): NonPayableTransactionObject<void>;

    supportsInterface(
      interfaceId: string | number[]
    ): NonPayableTransactionObject<boolean>;

    updatePrice(
      _owner: string,
      _offerId: number | string | BN,
      _newPrice: number | string | BN
    ): NonPayableTransactionObject<void>;

    updateSupply(
      _owner: string,
      _offerId: number | string | BN,
      _newSupply: number | string | BN
    ): NonPayableTransactionObject<void>;

    updateTime(
      _owner: string,
      _offerId: number | string | BN,
      _startTime: number | string | BN,
      _endTime: number | string | BN
    ): NonPayableTransactionObject<void>;
  };
  events: {
    AuthorizationUsed(cb?: Callback<AuthorizationUsed>): EventEmitter;
    AuthorizationUsed(
      options?: EventOptions,
      cb?: Callback<AuthorizationUsed>
    ): EventEmitter;

    CollectionStatusChanged(
      cb?: Callback<CollectionStatusChanged>
    ): EventEmitter;
    CollectionStatusChanged(
      options?: EventOptions,
      cb?: Callback<CollectionStatusChanged>
    ): EventEmitter;

    ContractAuthorizationChanged(
      cb?: Callback<ContractAuthorizationChanged>
    ): EventEmitter;
    ContractAuthorizationChanged(
      options?: EventOptions,
      cb?: Callback<ContractAuthorizationChanged>
    ): EventEmitter;

    ItemBought(cb?: Callback<ItemBought>): EventEmitter;
    ItemBought(options?: EventOptions, cb?: Callback<ItemBought>): EventEmitter;

    OfferCreated(cb?: Callback<OfferCreated>): EventEmitter;
    OfferCreated(
      options?: EventOptions,
      cb?: Callback<OfferCreated>
    ): EventEmitter;

    OfferStateUpdated(cb?: Callback<OfferStateUpdated>): EventEmitter;
    OfferStateUpdated(
      options?: EventOptions,
      cb?: Callback<OfferStateUpdated>
    ): EventEmitter;

    PaymentTokenStatusChanged(
      cb?: Callback<PaymentTokenStatusChanged>
    ): EventEmitter;
    PaymentTokenStatusChanged(
      options?: EventOptions,
      cb?: Callback<PaymentTokenStatusChanged>
    ): EventEmitter;

    PriceUpdated(cb?: Callback<PriceUpdated>): EventEmitter;
    PriceUpdated(
      options?: EventOptions,
      cb?: Callback<PriceUpdated>
    ): EventEmitter;

    RoleAdminChanged(cb?: Callback<RoleAdminChanged>): EventEmitter;
    RoleAdminChanged(
      options?: EventOptions,
      cb?: Callback<RoleAdminChanged>
    ): EventEmitter;

    RoleGranted(cb?: Callback<RoleGranted>): EventEmitter;
    RoleGranted(
      options?: EventOptions,
      cb?: Callback<RoleGranted>
    ): EventEmitter;

    RoleRevoked(cb?: Callback<RoleRevoked>): EventEmitter;
    RoleRevoked(
      options?: EventOptions,
      cb?: Callback<RoleRevoked>
    ): EventEmitter;

    SoldOut(cb?: Callback<SoldOut>): EventEmitter;
    SoldOut(options?: EventOptions, cb?: Callback<SoldOut>): EventEmitter;

    SupplyUpdated(cb?: Callback<SupplyUpdated>): EventEmitter;
    SupplyUpdated(
      options?: EventOptions,
      cb?: Callback<SupplyUpdated>
    ): EventEmitter;

    TimeUpdated(cb?: Callback<TimeUpdated>): EventEmitter;
    TimeUpdated(
      options?: EventOptions,
      cb?: Callback<TimeUpdated>
    ): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "AuthorizationUsed", cb: Callback<AuthorizationUsed>): void;
  once(
    event: "AuthorizationUsed",
    options: EventOptions,
    cb: Callback<AuthorizationUsed>
  ): void;

  once(
    event: "CollectionStatusChanged",
    cb: Callback<CollectionStatusChanged>
  ): void;
  once(
    event: "CollectionStatusChanged",
    options: EventOptions,
    cb: Callback<CollectionStatusChanged>
  ): void;

  once(
    event: "ContractAuthorizationChanged",
    cb: Callback<ContractAuthorizationChanged>
  ): void;
  once(
    event: "ContractAuthorizationChanged",
    options: EventOptions,
    cb: Callback<ContractAuthorizationChanged>
  ): void;

  once(event: "ItemBought", cb: Callback<ItemBought>): void;
  once(
    event: "ItemBought",
    options: EventOptions,
    cb: Callback<ItemBought>
  ): void;

  once(event: "OfferCreated", cb: Callback<OfferCreated>): void;
  once(
    event: "OfferCreated",
    options: EventOptions,
    cb: Callback<OfferCreated>
  ): void;

  once(event: "OfferStateUpdated", cb: Callback<OfferStateUpdated>): void;
  once(
    event: "OfferStateUpdated",
    options: EventOptions,
    cb: Callback<OfferStateUpdated>
  ): void;

  once(
    event: "PaymentTokenStatusChanged",
    cb: Callback<PaymentTokenStatusChanged>
  ): void;
  once(
    event: "PaymentTokenStatusChanged",
    options: EventOptions,
    cb: Callback<PaymentTokenStatusChanged>
  ): void;

  once(event: "PriceUpdated", cb: Callback<PriceUpdated>): void;
  once(
    event: "PriceUpdated",
    options: EventOptions,
    cb: Callback<PriceUpdated>
  ): void;

  once(event: "RoleAdminChanged", cb: Callback<RoleAdminChanged>): void;
  once(
    event: "RoleAdminChanged",
    options: EventOptions,
    cb: Callback<RoleAdminChanged>
  ): void;

  once(event: "RoleGranted", cb: Callback<RoleGranted>): void;
  once(
    event: "RoleGranted",
    options: EventOptions,
    cb: Callback<RoleGranted>
  ): void;

  once(event: "RoleRevoked", cb: Callback<RoleRevoked>): void;
  once(
    event: "RoleRevoked",
    options: EventOptions,
    cb: Callback<RoleRevoked>
  ): void;

  once(event: "SoldOut", cb: Callback<SoldOut>): void;
  once(event: "SoldOut", options: EventOptions, cb: Callback<SoldOut>): void;

  once(event: "SupplyUpdated", cb: Callback<SupplyUpdated>): void;
  once(
    event: "SupplyUpdated",
    options: EventOptions,
    cb: Callback<SupplyUpdated>
  ): void;

  once(event: "TimeUpdated", cb: Callback<TimeUpdated>): void;
  once(
    event: "TimeUpdated",
    options: EventOptions,
    cb: Callback<TimeUpdated>
  ): void;
}
