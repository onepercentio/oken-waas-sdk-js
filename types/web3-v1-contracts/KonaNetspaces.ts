/* Autogenerated file. Do not edit manually. */
// @ts-nocheck
/* tslint:disable */
/* eslint-disable */

import type BN from "bn.js";
import type { ContractOptions } from "web3-eth-contract";
import type { EventLog } from "web3-core";
import type { EventEmitter } from "events";
import type {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

export interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type EscrowCancelled = ContractEventLog<{
  property: string;
  creator: string;
  amount: string;
  0: string;
  1: string;
  2: string;
}>;
export type EscrowStarted = ContractEventLog<{
  property: string;
  creator: string;
  amount: string;
  0: string;
  1: string;
  2: string;
}>;
export type LoanExecuted = ContractEventLog<{
  property: string;
  0: string;
}>;
export type LoanRepaid = ContractEventLog<{
  property: string;
  total: string;
  0: string;
  1: string;
}>;
export type LoanWithdrawn = ContractEventLog<{
  property: string;
  loanAmount: string;
  0: string;
  1: string;
}>;
export type PropertyInfoSet = ContractEventLog<{
  property: string;
  creditLimit: string;
  0: string;
  1: string;
}>;
export type RoleAdminChanged = ContractEventLog<{
  role: string;
  previousAdminRole: string;
  newAdminRole: string;
  0: string;
  1: string;
  2: string;
}>;
export type RoleGranted = ContractEventLog<{
  role: string;
  account: string;
  sender: string;
  0: string;
  1: string;
  2: string;
}>;
export type RoleRevoked = ContractEventLog<{
  role: string;
  account: string;
  sender: string;
  0: string;
  1: string;
  2: string;
}>;
export type RollRequested = ContractEventLog<{
  property: string;
  0: string;
}>;
export type RollResponded = ContractEventLog<{
  property: string;
  accepted: boolean;
  0: string;
  1: boolean;
}>;

export interface KonaNetspaces extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): KonaNetspaces;
  clone(): KonaNetspaces;
  methods: {
    DEFAULT_ADMIN_ROLE(): NonPayableTransactionObject<string>;

    LIQUIDITY_PROVIDER_ROLE(): NonPayableTransactionObject<string>;

    PROPERTY_MANAGER_ROLE(): NonPayableTransactionObject<string>;

    addLiquidityInBrz(
      _total: number | string | BN
    ): NonPayableTransactionObject<void>;

    availableBrzInPool(): NonPayableTransactionObject<string>;

    cancelEscrow(_property: string): NonPayableTransactionObject<void>;

    escrows(arg0: string): NonPayableTransactionObject<{
      enabled: boolean;
      createdOn: string;
      createdBy: string;
      amount: string;
      property: [boolean, string, string, boolean, boolean];
      creditLimit: string;
      withdrawnOn: string;
      maturity: string;
      totalPrincipal: string;
      totalInterests: string;
      rollRequested: boolean;
      0: boolean;
      1: string;
      2: string;
      3: string;
      4: [boolean, string, string, boolean, boolean];
      5: string;
      6: string;
      7: string;
      8: string;
      9: string;
      10: boolean;
    }>;

    executeLoan(_property: string): NonPayableTransactionObject<void>;

    getRoleAdmin(role: string | number[]): NonPayableTransactionObject<string>;

    grantRole(
      role: string | number[],
      account: string
    ): NonPayableTransactionObject<void>;

    hasRole(
      role: string | number[],
      account: string
    ): NonPayableTransactionObject<boolean>;

    recoverETH(
      _amount: number | string | BN
    ): NonPayableTransactionObject<void>;

    recoverTokens(
      _amount: number | string | BN,
      _asset: string
    ): NonPayableTransactionObject<void>;

    removeBrzLiquidity(
      _total: number | string | BN
    ): NonPayableTransactionObject<void>;

    renounceRole(
      role: string | number[],
      account: string
    ): NonPayableTransactionObject<void>;

    repayLoan(_property: string): NonPayableTransactionObject<void>;

    requestRoll(_property: string): NonPayableTransactionObject<void>;

    respondToRoll(
      _property: string,
      _accept: boolean
    ): NonPayableTransactionObject<void>;

    revokeRole(
      role: string | number[],
      account: string
    ): NonPayableTransactionObject<void>;

    setPropertyInfo(
      _property: string,
      _firstResidence: boolean,
      _lastValue: number | string | BN,
      _lastValueDate: number | string | BN,
      _hasPropertyRights: boolean,
      _isResidential: boolean
    ): NonPayableTransactionObject<void>;

    startEscrow(
      _property: string,
      _amount: number | string | BN
    ): NonPayableTransactionObject<void>;

    supportsInterface(
      interfaceId: string | number[]
    ): NonPayableTransactionObject<boolean>;

    updateMinAmount(
      _minAmount: number | string | BN
    ): NonPayableTransactionObject<void>;

    withdrawLoan(_property: string): NonPayableTransactionObject<void>;
  };
  events: {
    EscrowCancelled(cb?: Callback<EscrowCancelled>): EventEmitter;
    EscrowCancelled(
      options?: EventOptions,
      cb?: Callback<EscrowCancelled>
    ): EventEmitter;

    EscrowStarted(cb?: Callback<EscrowStarted>): EventEmitter;
    EscrowStarted(
      options?: EventOptions,
      cb?: Callback<EscrowStarted>
    ): EventEmitter;

    LoanExecuted(cb?: Callback<LoanExecuted>): EventEmitter;
    LoanExecuted(
      options?: EventOptions,
      cb?: Callback<LoanExecuted>
    ): EventEmitter;

    LoanRepaid(cb?: Callback<LoanRepaid>): EventEmitter;
    LoanRepaid(options?: EventOptions, cb?: Callback<LoanRepaid>): EventEmitter;

    LoanWithdrawn(cb?: Callback<LoanWithdrawn>): EventEmitter;
    LoanWithdrawn(
      options?: EventOptions,
      cb?: Callback<LoanWithdrawn>
    ): EventEmitter;

    PropertyInfoSet(cb?: Callback<PropertyInfoSet>): EventEmitter;
    PropertyInfoSet(
      options?: EventOptions,
      cb?: Callback<PropertyInfoSet>
    ): EventEmitter;

    RoleAdminChanged(cb?: Callback<RoleAdminChanged>): EventEmitter;
    RoleAdminChanged(
      options?: EventOptions,
      cb?: Callback<RoleAdminChanged>
    ): EventEmitter;

    RoleGranted(cb?: Callback<RoleGranted>): EventEmitter;
    RoleGranted(
      options?: EventOptions,
      cb?: Callback<RoleGranted>
    ): EventEmitter;

    RoleRevoked(cb?: Callback<RoleRevoked>): EventEmitter;
    RoleRevoked(
      options?: EventOptions,
      cb?: Callback<RoleRevoked>
    ): EventEmitter;

    RollRequested(cb?: Callback<RollRequested>): EventEmitter;
    RollRequested(
      options?: EventOptions,
      cb?: Callback<RollRequested>
    ): EventEmitter;

    RollResponded(cb?: Callback<RollResponded>): EventEmitter;
    RollResponded(
      options?: EventOptions,
      cb?: Callback<RollResponded>
    ): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "EscrowCancelled", cb: Callback<EscrowCancelled>): void;
  once(
    event: "EscrowCancelled",
    options: EventOptions,
    cb: Callback<EscrowCancelled>
  ): void;

  once(event: "EscrowStarted", cb: Callback<EscrowStarted>): void;
  once(
    event: "EscrowStarted",
    options: EventOptions,
    cb: Callback<EscrowStarted>
  ): void;

  once(event: "LoanExecuted", cb: Callback<LoanExecuted>): void;
  once(
    event: "LoanExecuted",
    options: EventOptions,
    cb: Callback<LoanExecuted>
  ): void;

  once(event: "LoanRepaid", cb: Callback<LoanRepaid>): void;
  once(
    event: "LoanRepaid",
    options: EventOptions,
    cb: Callback<LoanRepaid>
  ): void;

  once(event: "LoanWithdrawn", cb: Callback<LoanWithdrawn>): void;
  once(
    event: "LoanWithdrawn",
    options: EventOptions,
    cb: Callback<LoanWithdrawn>
  ): void;

  once(event: "PropertyInfoSet", cb: Callback<PropertyInfoSet>): void;
  once(
    event: "PropertyInfoSet",
    options: EventOptions,
    cb: Callback<PropertyInfoSet>
  ): void;

  once(event: "RoleAdminChanged", cb: Callback<RoleAdminChanged>): void;
  once(
    event: "RoleAdminChanged",
    options: EventOptions,
    cb: Callback<RoleAdminChanged>
  ): void;

  once(event: "RoleGranted", cb: Callback<RoleGranted>): void;
  once(
    event: "RoleGranted",
    options: EventOptions,
    cb: Callback<RoleGranted>
  ): void;

  once(event: "RoleRevoked", cb: Callback<RoleRevoked>): void;
  once(
    event: "RoleRevoked",
    options: EventOptions,
    cb: Callback<RoleRevoked>
  ): void;

  once(event: "RollRequested", cb: Callback<RollRequested>): void;
  once(
    event: "RollRequested",
    options: EventOptions,
    cb: Callback<RollRequested>
  ): void;

  once(event: "RollResponded", cb: Callback<RollResponded>): void;
  once(
    event: "RollResponded",
    options: EventOptions,
    cb: Callback<RollResponded>
  ): void;
}
