/* Autogenerated file. Do not edit manually. */
// @ts-nocheck
/* tslint:disable */
/* eslint-disable */

import type BN from "bn.js";
import type { ContractOptions } from "web3-eth-contract";
import type { EventLog } from "web3-core";
import type { EventEmitter } from "events";
import type {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

export interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type AccessListSet = ContractEventLog<{
  accessList: string;
  0: string;
}>;
export type AccessListUnset = ContractEventLog<{}>;
export type Approval = ContractEventLog<{
  owner: string;
  spender: string;
  value: string;
  0: string;
  1: string;
  2: string;
}>;
export type BurnerAdded = ContractEventLog<{
  account: string;
  0: string;
}>;
export type BurnerRemoved = ContractEventLog<{
  account: string;
  0: string;
}>;
export type CapDisabled = ContractEventLog<{
  sender: string;
  0: string;
}>;
export type CapEnabled = ContractEventLog<{
  sender: string;
  0: string;
}>;
export type CapSet = ContractEventLog<{
  sender: string;
  amount: string;
  0: string;
  1: string;
}>;
export type CreatorAdded = ContractEventLog<{
  account: string;
  0: string;
}>;
export type CreatorRemoved = ContractEventLog<{
  account: string;
  0: string;
}>;
export type ForcedBurn = ContractEventLog<{
  requester: string;
  wallet: string;
  value: string;
  0: string;
  1: string;
  2: string;
}>;
export type ForcedTransfer = ContractEventLog<{
  requester: string;
  from: string;
  to: string;
  value: string;
  0: string;
  1: string;
  2: string;
  3: string;
}>;
export type MinterAdded = ContractEventLog<{
  account: string;
  0: string;
}>;
export type MinterRemoved = ContractEventLog<{
  account: string;
  0: string;
}>;
export type OperatorAdded = ContractEventLog<{
  account: string;
  0: string;
}>;
export type OperatorRemoved = ContractEventLog<{
  account: string;
  0: string;
}>;
export type OwnershipTransferred = ContractEventLog<{
  previousOwner: string;
  newOwner: string;
  0: string;
  1: string;
}>;
export type Paused = ContractEventLog<{
  account: string;
  0: string;
}>;
export type PauserAdded = ContractEventLog<{
  account: string;
  0: string;
}>;
export type PauserRemoved = ContractEventLog<{
  account: string;
  0: string;
}>;
export type Transfer = ContractEventLog<{
  from: string;
  to: string;
  value: string;
  0: string;
  1: string;
  2: string;
}>;
export type Unpaused = ContractEventLog<{
  account: string;
  0: string;
}>;

export interface ControlledToken extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): ControlledToken;
  clone(): ControlledToken;
  methods: {
    accessList(): NonPayableTransactionObject<string>;

    addBurner(account: string): NonPayableTransactionObject<void>;

    addMinter(account: string): NonPayableTransactionObject<void>;

    addOperator(account: string): NonPayableTransactionObject<void>;

    addPauser(account: string): NonPayableTransactionObject<void>;

    allowance(
      owner: string,
      spender: string
    ): NonPayableTransactionObject<string>;

    approve(
      _spender: string,
      _value: number | string | BN
    ): NonPayableTransactionObject<boolean>;

    balanceOf(account: string): NonPayableTransactionObject<string>;

    cap(): NonPayableTransactionObject<string>;

    capEnabled(): NonPayableTransactionObject<boolean>;

    checkingAccessList(): NonPayableTransactionObject<boolean>;

    decimals(): NonPayableTransactionObject<string>;

    decreaseAllowance(
      _spender: string,
      _subtractedValue: number | string | BN
    ): NonPayableTransactionObject<boolean>;

    disableCap(): NonPayableTransactionObject<void>;

    enableCap(): NonPayableTransactionObject<void>;

    forcedBurn(
      _who: string,
      _value: number | string | BN
    ): NonPayableTransactionObject<boolean>;

    forcedTransfer(
      _from: string,
      _to: string,
      _value: number | string | BN
    ): NonPayableTransactionObject<boolean>;

    increaseAllowance(
      _spender: string,
      _addedValue: number | string | BN
    ): NonPayableTransactionObject<boolean>;

    info(): NonPayableTransactionObject<string>;

    isBurner(account: string): NonPayableTransactionObject<boolean>;

    isCreator(account: string): NonPayableTransactionObject<boolean>;

    isMinter(account: string): NonPayableTransactionObject<boolean>;

    isOperator(account: string): NonPayableTransactionObject<boolean>;

    isOwner(): NonPayableTransactionObject<boolean>;

    isPauser(account: string): NonPayableTransactionObject<boolean>;

    mint(
      _to: string,
      _amount: number | string | BN
    ): NonPayableTransactionObject<boolean>;

    name(): NonPayableTransactionObject<string>;

    owner(): NonPayableTransactionObject<string>;

    pause(): NonPayableTransactionObject<void>;

    paused(): NonPayableTransactionObject<boolean>;

    removeAccessList(): NonPayableTransactionObject<void>;

    renounceBurner(): NonPayableTransactionObject<void>;

    renounceMinter(): NonPayableTransactionObject<void>;

    renounceOperator(): NonPayableTransactionObject<void>;

    renounceOwnership(): NonPayableTransactionObject<void>;

    renouncePauser(): NonPayableTransactionObject<void>;

    setCap(_newCap: number | string | BN): NonPayableTransactionObject<void>;

    setupAccessList(_accessList: string): NonPayableTransactionObject<void>;

    symbol(): NonPayableTransactionObject<string>;

    totalSupply(): NonPayableTransactionObject<string>;

    transfer(
      _to: string,
      _value: number | string | BN
    ): NonPayableTransactionObject<boolean>;

    transferFrom(
      _from: string,
      _to: string,
      _value: number | string | BN
    ): NonPayableTransactionObject<boolean>;

    transferOwnership(newOwner: string): NonPayableTransactionObject<void>;

    unpause(): NonPayableTransactionObject<void>;

    claimCreator(_address: string): NonPayableTransactionObject<void>;

    claimOperator(_address: string): NonPayableTransactionObject<void>;

    claimMinter(_address: string): NonPayableTransactionObject<void>;

    claimBurner(_address: string): NonPayableTransactionObject<void>;

    claimPauser(_address: string): NonPayableTransactionObject<void>;

    addCreator(_address: string): NonPayableTransactionObject<void>;

    renounceCreator(): NonPayableTransactionObject<void>;

    adminAddMinter(_address: string): NonPayableTransactionObject<void>;

    removeMinter(_address: string): NonPayableTransactionObject<void>;

    adminAddPauser(_address: string): NonPayableTransactionObject<void>;

    removePauser(_address: string): NonPayableTransactionObject<void>;

    adminAddOperator(_address: string): NonPayableTransactionObject<void>;

    removeOperator(_address: string): NonPayableTransactionObject<void>;

    adminAddBurner(_address: string): NonPayableTransactionObject<void>;

    removeBurner(_address: string): NonPayableTransactionObject<void>;
  };
  events: {
    AccessListSet(cb?: Callback<AccessListSet>): EventEmitter;
    AccessListSet(
      options?: EventOptions,
      cb?: Callback<AccessListSet>
    ): EventEmitter;

    AccessListUnset(cb?: Callback<AccessListUnset>): EventEmitter;
    AccessListUnset(
      options?: EventOptions,
      cb?: Callback<AccessListUnset>
    ): EventEmitter;

    Approval(cb?: Callback<Approval>): EventEmitter;
    Approval(options?: EventOptions, cb?: Callback<Approval>): EventEmitter;

    BurnerAdded(cb?: Callback<BurnerAdded>): EventEmitter;
    BurnerAdded(
      options?: EventOptions,
      cb?: Callback<BurnerAdded>
    ): EventEmitter;

    BurnerRemoved(cb?: Callback<BurnerRemoved>): EventEmitter;
    BurnerRemoved(
      options?: EventOptions,
      cb?: Callback<BurnerRemoved>
    ): EventEmitter;

    CapDisabled(cb?: Callback<CapDisabled>): EventEmitter;
    CapDisabled(
      options?: EventOptions,
      cb?: Callback<CapDisabled>
    ): EventEmitter;

    CapEnabled(cb?: Callback<CapEnabled>): EventEmitter;
    CapEnabled(options?: EventOptions, cb?: Callback<CapEnabled>): EventEmitter;

    CapSet(cb?: Callback<CapSet>): EventEmitter;
    CapSet(options?: EventOptions, cb?: Callback<CapSet>): EventEmitter;

    CreatorAdded(cb?: Callback<CreatorAdded>): EventEmitter;
    CreatorAdded(
      options?: EventOptions,
      cb?: Callback<CreatorAdded>
    ): EventEmitter;

    CreatorRemoved(cb?: Callback<CreatorRemoved>): EventEmitter;
    CreatorRemoved(
      options?: EventOptions,
      cb?: Callback<CreatorRemoved>
    ): EventEmitter;

    ForcedBurn(cb?: Callback<ForcedBurn>): EventEmitter;
    ForcedBurn(options?: EventOptions, cb?: Callback<ForcedBurn>): EventEmitter;

    ForcedTransfer(cb?: Callback<ForcedTransfer>): EventEmitter;
    ForcedTransfer(
      options?: EventOptions,
      cb?: Callback<ForcedTransfer>
    ): EventEmitter;

    MinterAdded(cb?: Callback<MinterAdded>): EventEmitter;
    MinterAdded(
      options?: EventOptions,
      cb?: Callback<MinterAdded>
    ): EventEmitter;

    MinterRemoved(cb?: Callback<MinterRemoved>): EventEmitter;
    MinterRemoved(
      options?: EventOptions,
      cb?: Callback<MinterRemoved>
    ): EventEmitter;

    OperatorAdded(cb?: Callback<OperatorAdded>): EventEmitter;
    OperatorAdded(
      options?: EventOptions,
      cb?: Callback<OperatorAdded>
    ): EventEmitter;

    OperatorRemoved(cb?: Callback<OperatorRemoved>): EventEmitter;
    OperatorRemoved(
      options?: EventOptions,
      cb?: Callback<OperatorRemoved>
    ): EventEmitter;

    OwnershipTransferred(cb?: Callback<OwnershipTransferred>): EventEmitter;
    OwnershipTransferred(
      options?: EventOptions,
      cb?: Callback<OwnershipTransferred>
    ): EventEmitter;

    Paused(cb?: Callback<Paused>): EventEmitter;
    Paused(options?: EventOptions, cb?: Callback<Paused>): EventEmitter;

    PauserAdded(cb?: Callback<PauserAdded>): EventEmitter;
    PauserAdded(
      options?: EventOptions,
      cb?: Callback<PauserAdded>
    ): EventEmitter;

    PauserRemoved(cb?: Callback<PauserRemoved>): EventEmitter;
    PauserRemoved(
      options?: EventOptions,
      cb?: Callback<PauserRemoved>
    ): EventEmitter;

    Transfer(cb?: Callback<Transfer>): EventEmitter;
    Transfer(options?: EventOptions, cb?: Callback<Transfer>): EventEmitter;

    Unpaused(cb?: Callback<Unpaused>): EventEmitter;
    Unpaused(options?: EventOptions, cb?: Callback<Unpaused>): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "AccessListSet", cb: Callback<AccessListSet>): void;
  once(
    event: "AccessListSet",
    options: EventOptions,
    cb: Callback<AccessListSet>
  ): void;

  once(event: "AccessListUnset", cb: Callback<AccessListUnset>): void;
  once(
    event: "AccessListUnset",
    options: EventOptions,
    cb: Callback<AccessListUnset>
  ): void;

  once(event: "Approval", cb: Callback<Approval>): void;
  once(event: "Approval", options: EventOptions, cb: Callback<Approval>): void;

  once(event: "BurnerAdded", cb: Callback<BurnerAdded>): void;
  once(
    event: "BurnerAdded",
    options: EventOptions,
    cb: Callback<BurnerAdded>
  ): void;

  once(event: "BurnerRemoved", cb: Callback<BurnerRemoved>): void;
  once(
    event: "BurnerRemoved",
    options: EventOptions,
    cb: Callback<BurnerRemoved>
  ): void;

  once(event: "CapDisabled", cb: Callback<CapDisabled>): void;
  once(
    event: "CapDisabled",
    options: EventOptions,
    cb: Callback<CapDisabled>
  ): void;

  once(event: "CapEnabled", cb: Callback<CapEnabled>): void;
  once(
    event: "CapEnabled",
    options: EventOptions,
    cb: Callback<CapEnabled>
  ): void;

  once(event: "CapSet", cb: Callback<CapSet>): void;
  once(event: "CapSet", options: EventOptions, cb: Callback<CapSet>): void;

  once(event: "CreatorAdded", cb: Callback<CreatorAdded>): void;
  once(
    event: "CreatorAdded",
    options: EventOptions,
    cb: Callback<CreatorAdded>
  ): void;

  once(event: "CreatorRemoved", cb: Callback<CreatorRemoved>): void;
  once(
    event: "CreatorRemoved",
    options: EventOptions,
    cb: Callback<CreatorRemoved>
  ): void;

  once(event: "ForcedBurn", cb: Callback<ForcedBurn>): void;
  once(
    event: "ForcedBurn",
    options: EventOptions,
    cb: Callback<ForcedBurn>
  ): void;

  once(event: "ForcedTransfer", cb: Callback<ForcedTransfer>): void;
  once(
    event: "ForcedTransfer",
    options: EventOptions,
    cb: Callback<ForcedTransfer>
  ): void;

  once(event: "MinterAdded", cb: Callback<MinterAdded>): void;
  once(
    event: "MinterAdded",
    options: EventOptions,
    cb: Callback<MinterAdded>
  ): void;

  once(event: "MinterRemoved", cb: Callback<MinterRemoved>): void;
  once(
    event: "MinterRemoved",
    options: EventOptions,
    cb: Callback<MinterRemoved>
  ): void;

  once(event: "OperatorAdded", cb: Callback<OperatorAdded>): void;
  once(
    event: "OperatorAdded",
    options: EventOptions,
    cb: Callback<OperatorAdded>
  ): void;

  once(event: "OperatorRemoved", cb: Callback<OperatorRemoved>): void;
  once(
    event: "OperatorRemoved",
    options: EventOptions,
    cb: Callback<OperatorRemoved>
  ): void;

  once(event: "OwnershipTransferred", cb: Callback<OwnershipTransferred>): void;
  once(
    event: "OwnershipTransferred",
    options: EventOptions,
    cb: Callback<OwnershipTransferred>
  ): void;

  once(event: "Paused", cb: Callback<Paused>): void;
  once(event: "Paused", options: EventOptions, cb: Callback<Paused>): void;

  once(event: "PauserAdded", cb: Callback<PauserAdded>): void;
  once(
    event: "PauserAdded",
    options: EventOptions,
    cb: Callback<PauserAdded>
  ): void;

  once(event: "PauserRemoved", cb: Callback<PauserRemoved>): void;
  once(
    event: "PauserRemoved",
    options: EventOptions,
    cb: Callback<PauserRemoved>
  ): void;

  once(event: "Transfer", cb: Callback<Transfer>): void;
  once(event: "Transfer", options: EventOptions, cb: Callback<Transfer>): void;

  once(event: "Unpaused", cb: Callback<Unpaused>): void;
  once(event: "Unpaused", options: EventOptions, cb: Callback<Unpaused>): void;
}
