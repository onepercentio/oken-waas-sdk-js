/* Autogenerated file. Do not edit manually. */
// @ts-nocheck
/* tslint:disable */
/* eslint-disable */

import type BN from "bn.js";
import type { ContractOptions } from "web3-eth-contract";
import type { EventLog } from "web3-core";
import type { EventEmitter } from "events";
import type {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

export interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type AuctionEndUpdated = ContractEventLog<{
  auctionId: string;
  auctionEnd: string;
  0: string;
  1: string;
}>;
export type AuctionSettled = ContractEventLog<{
  nftContractAddress: string;
  tokenId: string;
  auctionSettler: string;
  0: string;
  1: string;
  2: string;
}>;
export type AuctionWithdrawn = ContractEventLog<{
  nftContractAddress: string;
  tokenId: string;
  nftOwner: string;
  0: string;
  1: string;
  2: string;
}>;
export type BidMade = ContractEventLog<{
  nftContractAddress: string;
  tokenId: string;
  auctionId: string;
  bidder: string;
  erc20Token: string;
  tokenAmount: string;
  0: string;
  1: string;
  2: string;
  3: string;
  4: string;
  5: string;
}>;
export type BuyNowPriceUpdated = ContractEventLog<{
  nftContractAddress: string;
  tokenId: string;
  newBuyNowPrice: string;
  0: string;
  1: string;
  2: string;
}>;
export type HighestBidTaken = ContractEventLog<{
  auctionId: string;
  bidder: string;
  bid: string;
  0: string;
  1: string;
  2: string;
}>;
export type MinimumPriceUpdated = ContractEventLog<{
  auctionId: string;
  newMinPrice: string;
  0: string;
  1: string;
}>;
export type NFTTransferredAndSellerPaid = ContractEventLog<{
  nftContractAddress: string;
  tokenId: string;
  amount: string;
  nftSeller: string;
  highestBid: string;
  highestBidder: string;
  0: string;
  1: string;
  2: string;
  3: string;
  4: string;
  5: string;
}>;
export type NftAuctionCreated = ContractEventLog<{
  auctionId: string;
  auction: [
    string,
    string,
    string,
    string,
    string,
    string,
    string,
    string,
    string,
    string,
    string,
    string,
    string,
    string[],
    string[],
    string
  ];
  0: string;
  1: [
    string,
    string,
    string,
    string,
    string,
    string,
    string,
    string,
    string,
    string,
    string,
    string,
    string,
    string[],
    string[],
    string
  ];
}>;
export type RoleAdminChanged = ContractEventLog<{
  role: string;
  previousAdminRole: string;
  newAdminRole: string;
  0: string;
  1: string;
  2: string;
}>;
export type RoleGranted = ContractEventLog<{
  role: string;
  account: string;
  sender: string;
  0: string;
  1: string;
  2: string;
}>;
export type RoleRevoked = ContractEventLog<{
  role: string;
  account: string;
  sender: string;
  0: string;
  1: string;
  2: string;
}>;

export interface RarumNFTAuction extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): RarumNFTAuction;
  clone(): RarumNFTAuction;
  methods: {
    DEFAULT_ADMIN_ROLE(): NonPayableTransactionObject<string>;

    ONE_HOUR(): NonPayableTransactionObject<string>;

    OPERATOR_ROLE(): NonPayableTransactionObject<string>;

    __ERC1155_init_unchained(): NonPayableTransactionObject<void>;

    __RarumNFTAuction_init(): NonPayableTransactionObject<void>;

    _ids(): NonPayableTransactionObject<string>;

    auctions(arg0: number | string | BN): NonPayableTransactionObject<{
      amount: string;
      tokenId: string;
      bidIncreasePercentage: string;
      bidExtendPeriod: string;
      minPrice: string;
      minNextBid: string;
      start: string;
      end: string;
      highestBid: string;
      highestBidder: string;
      nftContractAddress: string;
      nftSeller: string;
      ERC20Token: string;
      status: string;
      0: string;
      1: string;
      2: string;
      3: string;
      4: string;
      5: string;
      6: string;
      7: string;
      8: string;
      9: string;
      10: string;
      11: string;
      12: string;
      13: string;
    }>;

    authorizedAuction(
      _newAuction: [
        string,
        number | string | BN,
        number | string | BN,
        string,
        number | string | BN,
        number | string | BN,
        number | string | BN,
        number | string | BN,
        number | string | BN,
        string[],
        (number | string | BN)[]
      ],
      _seller: string
    ): NonPayableTransactionObject<void>;

    authorizedBid(
      _auctionId: number | string | BN,
      _erc20Token: string,
      _tokenAmount: number | string | BN,
      _bidder: string
    ): NonPayableTransactionObject<void>;

    authorizedUpdateMinimumPrice(
      _auctionId: number | string | BN,
      _seller: string,
      _newMinPrice: number | string | BN
    ): NonPayableTransactionObject<void>;

    authorizedWithdrawAuction(
      _auctionId: number | string | BN,
      _seller: string
    ): NonPayableTransactionObject<void>;

    bidPercentageConversionFactor(): NonPayableTransactionObject<string>;

    defaultBidExtendPeriod(): NonPayableTransactionObject<string>;

    defaultBidIncreasePercentage(): NonPayableTransactionObject<string>;

    getActiveAuctionsByHolder(
      _holder: string
    ): NonPayableTransactionObject<
      [
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string[],
        string[],
        string
      ][]
    >;

    getActiveAuctionsByToken(
      _nftContractAddress: string,
      _tokenId: number | string | BN
    ): NonPayableTransactionObject<
      [
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string[],
        string[],
        string
      ][]
    >;

    getRoleAdmin(role: string | number[]): NonPayableTransactionObject<string>;

    getRoleMember(
      role: string | number[],
      index: number | string | BN
    ): NonPayableTransactionObject<string>;

    getRoleMemberCount(
      role: string | number[]
    ): NonPayableTransactionObject<string>;

    grantRole(
      role: string | number[],
      account: string
    ): NonPayableTransactionObject<void>;

    hasRole(
      role: string | number[],
      account: string
    ): NonPayableTransactionObject<boolean>;

    initialize(): NonPayableTransactionObject<void>;

    onERC1155BatchReceived(
      arg0: string,
      arg1: string,
      arg2: (number | string | BN)[],
      arg3: (number | string | BN)[],
      arg4: string | number[]
    ): NonPayableTransactionObject<string>;

    onERC1155Received(
      arg0: string,
      arg1: string,
      arg2: number | string | BN,
      arg3: number | string | BN,
      arg4: string | number[]
    ): NonPayableTransactionObject<string>;

    renounceRole(
      role: string | number[],
      account: string
    ): NonPayableTransactionObject<void>;

    revokeRole(
      role: string | number[],
      account: string
    ): NonPayableTransactionObject<void>;

    settleAuction(
      _auctionId: number | string | BN
    ): NonPayableTransactionObject<void>;

    supportsInterface(
      interfaceId: string | number[]
    ): NonPayableTransactionObject<boolean>;

    takeHighestBid(
      _auctionId: number | string | BN,
      _seller: string
    ): NonPayableTransactionObject<void>;

    updateExtendBidPeriod(
      _newPeriod: number | string | BN
    ): NonPayableTransactionObject<void>;
  };
  events: {
    AuctionEndUpdated(cb?: Callback<AuctionEndUpdated>): EventEmitter;
    AuctionEndUpdated(
      options?: EventOptions,
      cb?: Callback<AuctionEndUpdated>
    ): EventEmitter;

    AuctionSettled(cb?: Callback<AuctionSettled>): EventEmitter;
    AuctionSettled(
      options?: EventOptions,
      cb?: Callback<AuctionSettled>
    ): EventEmitter;

    AuctionWithdrawn(cb?: Callback<AuctionWithdrawn>): EventEmitter;
    AuctionWithdrawn(
      options?: EventOptions,
      cb?: Callback<AuctionWithdrawn>
    ): EventEmitter;

    BidMade(cb?: Callback<BidMade>): EventEmitter;
    BidMade(options?: EventOptions, cb?: Callback<BidMade>): EventEmitter;

    BuyNowPriceUpdated(cb?: Callback<BuyNowPriceUpdated>): EventEmitter;
    BuyNowPriceUpdated(
      options?: EventOptions,
      cb?: Callback<BuyNowPriceUpdated>
    ): EventEmitter;

    HighestBidTaken(cb?: Callback<HighestBidTaken>): EventEmitter;
    HighestBidTaken(
      options?: EventOptions,
      cb?: Callback<HighestBidTaken>
    ): EventEmitter;

    MinimumPriceUpdated(cb?: Callback<MinimumPriceUpdated>): EventEmitter;
    MinimumPriceUpdated(
      options?: EventOptions,
      cb?: Callback<MinimumPriceUpdated>
    ): EventEmitter;

    NFTTransferredAndSellerPaid(
      cb?: Callback<NFTTransferredAndSellerPaid>
    ): EventEmitter;
    NFTTransferredAndSellerPaid(
      options?: EventOptions,
      cb?: Callback<NFTTransferredAndSellerPaid>
    ): EventEmitter;

    NftAuctionCreated(cb?: Callback<NftAuctionCreated>): EventEmitter;
    NftAuctionCreated(
      options?: EventOptions,
      cb?: Callback<NftAuctionCreated>
    ): EventEmitter;

    RoleAdminChanged(cb?: Callback<RoleAdminChanged>): EventEmitter;
    RoleAdminChanged(
      options?: EventOptions,
      cb?: Callback<RoleAdminChanged>
    ): EventEmitter;

    RoleGranted(cb?: Callback<RoleGranted>): EventEmitter;
    RoleGranted(
      options?: EventOptions,
      cb?: Callback<RoleGranted>
    ): EventEmitter;

    RoleRevoked(cb?: Callback<RoleRevoked>): EventEmitter;
    RoleRevoked(
      options?: EventOptions,
      cb?: Callback<RoleRevoked>
    ): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "AuctionEndUpdated", cb: Callback<AuctionEndUpdated>): void;
  once(
    event: "AuctionEndUpdated",
    options: EventOptions,
    cb: Callback<AuctionEndUpdated>
  ): void;

  once(event: "AuctionSettled", cb: Callback<AuctionSettled>): void;
  once(
    event: "AuctionSettled",
    options: EventOptions,
    cb: Callback<AuctionSettled>
  ): void;

  once(event: "AuctionWithdrawn", cb: Callback<AuctionWithdrawn>): void;
  once(
    event: "AuctionWithdrawn",
    options: EventOptions,
    cb: Callback<AuctionWithdrawn>
  ): void;

  once(event: "BidMade", cb: Callback<BidMade>): void;
  once(event: "BidMade", options: EventOptions, cb: Callback<BidMade>): void;

  once(event: "BuyNowPriceUpdated", cb: Callback<BuyNowPriceUpdated>): void;
  once(
    event: "BuyNowPriceUpdated",
    options: EventOptions,
    cb: Callback<BuyNowPriceUpdated>
  ): void;

  once(event: "HighestBidTaken", cb: Callback<HighestBidTaken>): void;
  once(
    event: "HighestBidTaken",
    options: EventOptions,
    cb: Callback<HighestBidTaken>
  ): void;

  once(event: "MinimumPriceUpdated", cb: Callback<MinimumPriceUpdated>): void;
  once(
    event: "MinimumPriceUpdated",
    options: EventOptions,
    cb: Callback<MinimumPriceUpdated>
  ): void;

  once(
    event: "NFTTransferredAndSellerPaid",
    cb: Callback<NFTTransferredAndSellerPaid>
  ): void;
  once(
    event: "NFTTransferredAndSellerPaid",
    options: EventOptions,
    cb: Callback<NFTTransferredAndSellerPaid>
  ): void;

  once(event: "NftAuctionCreated", cb: Callback<NftAuctionCreated>): void;
  once(
    event: "NftAuctionCreated",
    options: EventOptions,
    cb: Callback<NftAuctionCreated>
  ): void;

  once(event: "RoleAdminChanged", cb: Callback<RoleAdminChanged>): void;
  once(
    event: "RoleAdminChanged",
    options: EventOptions,
    cb: Callback<RoleAdminChanged>
  ): void;

  once(event: "RoleGranted", cb: Callback<RoleGranted>): void;
  once(
    event: "RoleGranted",
    options: EventOptions,
    cb: Callback<RoleGranted>
  ): void;

  once(event: "RoleRevoked", cb: Callback<RoleRevoked>): void;
  once(
    event: "RoleRevoked",
    options: EventOptions,
    cb: Callback<RoleRevoked>
  ): void;
}
