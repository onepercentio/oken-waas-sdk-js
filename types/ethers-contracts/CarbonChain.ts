/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace CarbonChain {
  export type CarbonBatchStruct = {
    totalCarbonOffset: PromiseOrValue<BigNumberish>;
    hashChain: PromiseOrValue<BytesLike>;
    timestamp: PromiseOrValue<BigNumberish>;
    blockNumber: PromiseOrValue<BigNumberish>;
  };

  export type CarbonBatchStructOutput = [
    BigNumber,
    string,
    BigNumber,
    BigNumber
  ] & {
    totalCarbonOffset: BigNumber;
    hashChain: string;
    timestamp: BigNumber;
    blockNumber: BigNumber;
  };
}

export interface CarbonChainInterface extends utils.Interface {
  functions: {
    "batches(uint256)": FunctionFragment;
    "carbonOffset(address)": FunctionFragment;
    "hashChain()": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "totalTransactions(address)": FunctionFragment;
    "transactions(uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "initialize(address,address,address,uint256,uint256)": FunctionFragment;
    "offsetCarbon(uint256,string,string)": FunctionFragment;
    "createBatch()": FunctionFragment;
    "shouldCreateBatch()": FunctionFragment;
    "changeBridge(address)": FunctionFragment;
    "getBridge()": FunctionFragment;
    "changeCMCO2(address)": FunctionFragment;
    "getCMCO2()": FunctionFragment;
    "changeRecipient(address)": FunctionFragment;
    "getRecipient()": FunctionFragment;
    "changeMemPoolLimit(uint256)": FunctionFragment;
    "getMemPoolLimit()": FunctionFragment;
    "changeBatchTimeLimit(uint256)": FunctionFragment;
    "getBatchTimeLimit()": FunctionFragment;
    "getPendingTransactionsCount()": FunctionFragment;
    "getLastBatchCreation()": FunctionFragment;
    "numberOfTransactions()": FunctionFragment;
    "numberOfBatches()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "batches"
      | "carbonOffset"
      | "hashChain"
      | "owner"
      | "renounceOwnership"
      | "totalTransactions"
      | "transactions"
      | "transferOwnership"
      | "initialize"
      | "offsetCarbon"
      | "createBatch"
      | "shouldCreateBatch"
      | "changeBridge"
      | "getBridge"
      | "changeCMCO2"
      | "getCMCO2"
      | "changeRecipient"
      | "getRecipient"
      | "changeMemPoolLimit"
      | "getMemPoolLimit"
      | "changeBatchTimeLimit"
      | "getBatchTimeLimit"
      | "getPendingTransactionsCount"
      | "getLastBatchCreation"
      | "numberOfTransactions"
      | "numberOfBatches"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "batches",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "carbonOffset",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "hashChain", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalTransactions",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "transactions",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "offsetCarbon",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createBatch",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "shouldCreateBatch",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "changeBridge",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "getBridge", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "changeCMCO2",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "getCMCO2", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "changeRecipient",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRecipient",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "changeMemPoolLimit",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getMemPoolLimit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "changeBatchTimeLimit",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getBatchTimeLimit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPendingTransactionsCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLastBatchCreation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "numberOfTransactions",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "numberOfBatches",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "batches", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "carbonOffset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hashChain", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalTransactions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transactions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "offsetCarbon",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "shouldCreateBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeBridge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getBridge", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "changeCMCO2",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getCMCO2", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "changeRecipient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRecipient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeMemPoolLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMemPoolLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeBatchTimeLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBatchTimeLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPendingTransactionsCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLastBatchCreation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "numberOfTransactions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "numberOfBatches",
    data: BytesLike
  ): Result;

  events: {
    "BatchTimeLimitChanged(uint256)": EventFragment;
    "BridgeChanged(address)": EventFragment;
    "CMCO2Changed(address)": EventFragment;
    "CarbonOffset(uint256,string,string,address,bytes32,uint256,uint256)": EventFragment;
    "CarbonOffsetBatch(tuple,uint256,address,bytes32,uint256)": EventFragment;
    "MemPoolLimitChanged(uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "RecipientChanged(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BatchTimeLimitChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BridgeChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CMCO2Changed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CarbonOffset"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CarbonOffsetBatch"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MemPoolLimitChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RecipientChanged"): EventFragment;
}

export interface BatchTimeLimitChangedEventObject {
  newBatchTimeLimit: BigNumber;
}
export type BatchTimeLimitChangedEvent = TypedEvent<
  [BigNumber],
  BatchTimeLimitChangedEventObject
>;

export type BatchTimeLimitChangedEventFilter =
  TypedEventFilter<BatchTimeLimitChangedEvent>;

export interface BridgeChangedEventObject {
  newBridge: string;
}
export type BridgeChangedEvent = TypedEvent<[string], BridgeChangedEventObject>;

export type BridgeChangedEventFilter = TypedEventFilter<BridgeChangedEvent>;

export interface CMCO2ChangedEventObject {
  newCMCO2: string;
}
export type CMCO2ChangedEvent = TypedEvent<[string], CMCO2ChangedEventObject>;

export type CMCO2ChangedEventFilter = TypedEventFilter<CMCO2ChangedEvent>;

export interface CarbonOffsetEventObject {
  carbonTon: BigNumber;
  transactionInfo: string;
  onBehalfOf: string;
  sender: string;
  offsetHash: string;
  transactionIndex: BigNumber;
  batchIndex: BigNumber;
}
export type CarbonOffsetEvent = TypedEvent<
  [BigNumber, string, string, string, string, BigNumber, BigNumber],
  CarbonOffsetEventObject
>;

export type CarbonOffsetEventFilter = TypedEventFilter<CarbonOffsetEvent>;

export interface CarbonOffsetBatchEventObject {
  newBatch: CarbonChain.CarbonBatchStructOutput;
  carbonTon: BigNumber;
  recipient: string;
  hashChain: string;
  batchIndex: BigNumber;
}
export type CarbonOffsetBatchEvent = TypedEvent<
  [CarbonChain.CarbonBatchStructOutput, BigNumber, string, string, BigNumber],
  CarbonOffsetBatchEventObject
>;

export type CarbonOffsetBatchEventFilter =
  TypedEventFilter<CarbonOffsetBatchEvent>;

export interface MemPoolLimitChangedEventObject {
  newMemPoolLimit: BigNumber;
}
export type MemPoolLimitChangedEvent = TypedEvent<
  [BigNumber],
  MemPoolLimitChangedEventObject
>;

export type MemPoolLimitChangedEventFilter =
  TypedEventFilter<MemPoolLimitChangedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface RecipientChangedEventObject {
  newRecipient: string;
}
export type RecipientChangedEvent = TypedEvent<
  [string],
  RecipientChangedEventObject
>;

export type RecipientChangedEventFilter =
  TypedEventFilter<RecipientChangedEvent>;

export interface CarbonChain extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: CarbonChainInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    batches(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, BigNumber, BigNumber] & {
        totalCarbonOffset: BigNumber;
        hashChain: string;
        timestamp: BigNumber;
        blockNumber: BigNumber;
      }
    >;

    carbonOffset(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    hashChain(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    totalTransactions(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    transactions(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, string, string, string, BigNumber] & {
        carbonTon: BigNumber;
        transactionInfo: string;
        onBehalfOf: string;
        sender: string;
        offsetHash: string;
        batchNumber: BigNumber;
      }
    >;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    initialize(
      _cMCO2: PromiseOrValue<string>,
      _bridge: PromiseOrValue<string>,
      _recipient: PromiseOrValue<string>,
      _memPoolLimit: PromiseOrValue<BigNumberish>,
      _batchTimeLimit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    offsetCarbon(
      _carbonTon: PromiseOrValue<BigNumberish>,
      _transactionInfo: PromiseOrValue<string>,
      _onBehalfOf: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createBatch(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    shouldCreateBatch(overrides?: CallOverrides): Promise<[boolean]>;

    changeBridge(
      newBridge: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getBridge(overrides?: CallOverrides): Promise<[string]>;

    changeCMCO2(
      newCMCO2: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getCMCO2(overrides?: CallOverrides): Promise<[string]>;

    changeRecipient(
      newRecipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getRecipient(overrides?: CallOverrides): Promise<[string]>;

    changeMemPoolLimit(
      newMemPoolLimit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getMemPoolLimit(overrides?: CallOverrides): Promise<[BigNumber]>;

    changeBatchTimeLimit(
      newBatchTimeLimit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getBatchTimeLimit(overrides?: CallOverrides): Promise<[BigNumber]>;

    getPendingTransactionsCount(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getLastBatchCreation(overrides?: CallOverrides): Promise<[BigNumber]>;

    numberOfTransactions(overrides?: CallOverrides): Promise<[BigNumber]>;

    numberOfBatches(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  batches(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, string, BigNumber, BigNumber] & {
      totalCarbonOffset: BigNumber;
      hashChain: string;
      timestamp: BigNumber;
      blockNumber: BigNumber;
    }
  >;

  carbonOffset(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  hashChain(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  totalTransactions(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  transactions(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, string, string, string, string, BigNumber] & {
      carbonTon: BigNumber;
      transactionInfo: string;
      onBehalfOf: string;
      sender: string;
      offsetHash: string;
      batchNumber: BigNumber;
    }
  >;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  initialize(
    _cMCO2: PromiseOrValue<string>,
    _bridge: PromiseOrValue<string>,
    _recipient: PromiseOrValue<string>,
    _memPoolLimit: PromiseOrValue<BigNumberish>,
    _batchTimeLimit: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  offsetCarbon(
    _carbonTon: PromiseOrValue<BigNumberish>,
    _transactionInfo: PromiseOrValue<string>,
    _onBehalfOf: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createBatch(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  shouldCreateBatch(overrides?: CallOverrides): Promise<boolean>;

  changeBridge(
    newBridge: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getBridge(overrides?: CallOverrides): Promise<string>;

  changeCMCO2(
    newCMCO2: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getCMCO2(overrides?: CallOverrides): Promise<string>;

  changeRecipient(
    newRecipient: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getRecipient(overrides?: CallOverrides): Promise<string>;

  changeMemPoolLimit(
    newMemPoolLimit: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getMemPoolLimit(overrides?: CallOverrides): Promise<BigNumber>;

  changeBatchTimeLimit(
    newBatchTimeLimit: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getBatchTimeLimit(overrides?: CallOverrides): Promise<BigNumber>;

  getPendingTransactionsCount(overrides?: CallOverrides): Promise<BigNumber>;

  getLastBatchCreation(overrides?: CallOverrides): Promise<BigNumber>;

  numberOfTransactions(overrides?: CallOverrides): Promise<BigNumber>;

  numberOfBatches(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    batches(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, BigNumber, BigNumber] & {
        totalCarbonOffset: BigNumber;
        hashChain: string;
        timestamp: BigNumber;
        blockNumber: BigNumber;
      }
    >;

    carbonOffset(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hashChain(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    totalTransactions(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transactions(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, string, string, string, BigNumber] & {
        carbonTon: BigNumber;
        transactionInfo: string;
        onBehalfOf: string;
        sender: string;
        offsetHash: string;
        batchNumber: BigNumber;
      }
    >;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    initialize(
      _cMCO2: PromiseOrValue<string>,
      _bridge: PromiseOrValue<string>,
      _recipient: PromiseOrValue<string>,
      _memPoolLimit: PromiseOrValue<BigNumberish>,
      _batchTimeLimit: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    offsetCarbon(
      _carbonTon: PromiseOrValue<BigNumberish>,
      _transactionInfo: PromiseOrValue<string>,
      _onBehalfOf: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    createBatch(overrides?: CallOverrides): Promise<void>;

    shouldCreateBatch(overrides?: CallOverrides): Promise<boolean>;

    changeBridge(
      newBridge: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getBridge(overrides?: CallOverrides): Promise<string>;

    changeCMCO2(
      newCMCO2: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getCMCO2(overrides?: CallOverrides): Promise<string>;

    changeRecipient(
      newRecipient: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getRecipient(overrides?: CallOverrides): Promise<string>;

    changeMemPoolLimit(
      newMemPoolLimit: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getMemPoolLimit(overrides?: CallOverrides): Promise<BigNumber>;

    changeBatchTimeLimit(
      newBatchTimeLimit: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getBatchTimeLimit(overrides?: CallOverrides): Promise<BigNumber>;

    getPendingTransactionsCount(overrides?: CallOverrides): Promise<BigNumber>;

    getLastBatchCreation(overrides?: CallOverrides): Promise<BigNumber>;

    numberOfTransactions(overrides?: CallOverrides): Promise<BigNumber>;

    numberOfBatches(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "BatchTimeLimitChanged(uint256)"(
      newBatchTimeLimit?: null
    ): BatchTimeLimitChangedEventFilter;
    BatchTimeLimitChanged(
      newBatchTimeLimit?: null
    ): BatchTimeLimitChangedEventFilter;

    "BridgeChanged(address)"(newBridge?: null): BridgeChangedEventFilter;
    BridgeChanged(newBridge?: null): BridgeChangedEventFilter;

    "CMCO2Changed(address)"(newCMCO2?: null): CMCO2ChangedEventFilter;
    CMCO2Changed(newCMCO2?: null): CMCO2ChangedEventFilter;

    "CarbonOffset(uint256,string,string,address,bytes32,uint256,uint256)"(
      carbonTon?: null,
      transactionInfo?: null,
      onBehalfOf?: null,
      sender?: null,
      offsetHash?: null,
      transactionIndex?: PromiseOrValue<BigNumberish> | null,
      batchIndex?: PromiseOrValue<BigNumberish> | null
    ): CarbonOffsetEventFilter;
    CarbonOffset(
      carbonTon?: null,
      transactionInfo?: null,
      onBehalfOf?: null,
      sender?: null,
      offsetHash?: null,
      transactionIndex?: PromiseOrValue<BigNumberish> | null,
      batchIndex?: PromiseOrValue<BigNumberish> | null
    ): CarbonOffsetEventFilter;

    "CarbonOffsetBatch(tuple,uint256,address,bytes32,uint256)"(
      newBatch?: null,
      carbonTon?: null,
      recipient?: null,
      hashChain?: null,
      batchIndex?: null
    ): CarbonOffsetBatchEventFilter;
    CarbonOffsetBatch(
      newBatch?: null,
      carbonTon?: null,
      recipient?: null,
      hashChain?: null,
      batchIndex?: null
    ): CarbonOffsetBatchEventFilter;

    "MemPoolLimitChanged(uint256)"(
      newMemPoolLimit?: null
    ): MemPoolLimitChangedEventFilter;
    MemPoolLimitChanged(newMemPoolLimit?: null): MemPoolLimitChangedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "RecipientChanged(address)"(
      newRecipient?: null
    ): RecipientChangedEventFilter;
    RecipientChanged(newRecipient?: null): RecipientChangedEventFilter;
  };

  estimateGas: {
    batches(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    carbonOffset(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hashChain(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    totalTransactions(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transactions(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    initialize(
      _cMCO2: PromiseOrValue<string>,
      _bridge: PromiseOrValue<string>,
      _recipient: PromiseOrValue<string>,
      _memPoolLimit: PromiseOrValue<BigNumberish>,
      _batchTimeLimit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    offsetCarbon(
      _carbonTon: PromiseOrValue<BigNumberish>,
      _transactionInfo: PromiseOrValue<string>,
      _onBehalfOf: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createBatch(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    shouldCreateBatch(overrides?: CallOverrides): Promise<BigNumber>;

    changeBridge(
      newBridge: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getBridge(overrides?: CallOverrides): Promise<BigNumber>;

    changeCMCO2(
      newCMCO2: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getCMCO2(overrides?: CallOverrides): Promise<BigNumber>;

    changeRecipient(
      newRecipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getRecipient(overrides?: CallOverrides): Promise<BigNumber>;

    changeMemPoolLimit(
      newMemPoolLimit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getMemPoolLimit(overrides?: CallOverrides): Promise<BigNumber>;

    changeBatchTimeLimit(
      newBatchTimeLimit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getBatchTimeLimit(overrides?: CallOverrides): Promise<BigNumber>;

    getPendingTransactionsCount(overrides?: CallOverrides): Promise<BigNumber>;

    getLastBatchCreation(overrides?: CallOverrides): Promise<BigNumber>;

    numberOfTransactions(overrides?: CallOverrides): Promise<BigNumber>;

    numberOfBatches(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    batches(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    carbonOffset(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hashChain(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    totalTransactions(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transactions(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    initialize(
      _cMCO2: PromiseOrValue<string>,
      _bridge: PromiseOrValue<string>,
      _recipient: PromiseOrValue<string>,
      _memPoolLimit: PromiseOrValue<BigNumberish>,
      _batchTimeLimit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    offsetCarbon(
      _carbonTon: PromiseOrValue<BigNumberish>,
      _transactionInfo: PromiseOrValue<string>,
      _onBehalfOf: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createBatch(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    shouldCreateBatch(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    changeBridge(
      newBridge: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getBridge(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    changeCMCO2(
      newCMCO2: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getCMCO2(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    changeRecipient(
      newRecipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getRecipient(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    changeMemPoolLimit(
      newMemPoolLimit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getMemPoolLimit(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    changeBatchTimeLimit(
      newBatchTimeLimit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getBatchTimeLimit(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPendingTransactionsCount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLastBatchCreation(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    numberOfTransactions(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    numberOfBatches(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
