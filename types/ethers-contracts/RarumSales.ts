/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace Models {
  export type PaymentOptionsStruct = {
    price: PromiseOrValue<BigNumberish>;
    beneficiary: PromiseOrValue<string>;
    paymentToken: PromiseOrValue<string>;
  };

  export type PaymentOptionsStructOutput = [BigNumber, string, string] & {
    price: BigNumber;
    beneficiary: string;
    paymentToken: string;
  };

  export type DeliveryOptionsStruct = {
    tokenId: PromiseOrValue<BigNumberish>;
    lootBoxOptionId: PromiseOrValue<BigNumberish>;
    nft: PromiseOrValue<string>;
    lootBox: PromiseOrValue<string>;
    deliveryType: PromiseOrValue<BigNumberish>;
  };

  export type DeliveryOptionsStructOutput = [
    BigNumber,
    BigNumber,
    string,
    string,
    number
  ] & {
    tokenId: BigNumber;
    lootBoxOptionId: BigNumber;
    nft: string;
    lootBox: string;
    deliveryType: number;
  };

  export type OfferStruct = {
    id: PromiseOrValue<BigNumberish>;
    supply: PromiseOrValue<BigNumberish>;
    totalSold: PromiseOrValue<BigNumberish>;
    maxUnitsPerPurchase: PromiseOrValue<BigNumberish>;
    startTime: PromiseOrValue<BigNumberish>;
    endTime: PromiseOrValue<BigNumberish>;
    owner: PromiseOrValue<string>;
    metadataURI: PromiseOrValue<string>;
    active: PromiseOrValue<boolean>;
    fromTenant: PromiseOrValue<boolean>;
    offerType: PromiseOrValue<BigNumberish>;
    paymentOptions: Models.PaymentOptionsStruct;
    deliveryOptions: Models.DeliveryOptionsStruct;
  };

  export type OfferStructOutput = [
    BigNumber,
    number,
    number,
    number,
    number,
    number,
    string,
    string,
    boolean,
    boolean,
    number,
    Models.PaymentOptionsStructOutput,
    Models.DeliveryOptionsStructOutput
  ] & {
    id: BigNumber;
    supply: number;
    totalSold: number;
    maxUnitsPerPurchase: number;
    startTime: number;
    endTime: number;
    owner: string;
    metadataURI: string;
    active: boolean;
    fromTenant: boolean;
    offerType: number;
    paymentOptions: Models.PaymentOptionsStructOutput;
    deliveryOptions: Models.DeliveryOptionsStructOutput;
  };

  export type OfferRequestStruct = {
    supply: PromiseOrValue<BigNumberish>;
    maxUnitsPerPurchase: PromiseOrValue<BigNumberish>;
    startTime: PromiseOrValue<BigNumberish>;
    endTime: PromiseOrValue<BigNumberish>;
    owner: PromiseOrValue<string>;
    metadataURI: PromiseOrValue<string>;
    active: PromiseOrValue<boolean>;
    paymentOptions: Models.PaymentOptionsStruct;
    deliveryOptions: Models.DeliveryOptionsStruct;
  };

  export type OfferRequestStructOutput = [
    number,
    number,
    number,
    number,
    string,
    string,
    boolean,
    Models.PaymentOptionsStructOutput,
    Models.DeliveryOptionsStructOutput
  ] & {
    supply: number;
    maxUnitsPerPurchase: number;
    startTime: number;
    endTime: number;
    owner: string;
    metadataURI: string;
    active: boolean;
    paymentOptions: Models.PaymentOptionsStructOutput;
    deliveryOptions: Models.DeliveryOptionsStructOutput;
  };

  export type AuthorizationStruct = {
    authorization: PromiseOrValue<BytesLike>;
    deadline: PromiseOrValue<BigNumberish>;
    signer: PromiseOrValue<string>;
    v: PromiseOrValue<BigNumberish>;
    r: PromiseOrValue<BytesLike>;
    s: PromiseOrValue<BytesLike>;
  };

  export type AuthorizationStructOutput = [
    string,
    number,
    string,
    number,
    string,
    string
  ] & {
    authorization: string;
    deadline: number;
    signer: string;
    v: number;
    r: string;
    s: string;
  };
}

export interface RarumSalesInterface extends utils.Interface {
  functions: {
    "ADMIN_ROLE()": FunctionFragment;
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "DOMAIN_SEPARATOR()": FunctionFragment;
    "MINTER_ROLE()": FunctionFragment;
    "OPERATOR_ROLE()": FunctionFragment;
    "allowedPaymentTokens(address)": FunctionFragment;
    "authorizationState(address,bytes32)": FunctionFragment;
    "authorizedCollections(address)": FunctionFragment;
    "buy(address,uint256,uint256,uint32)": FunctionFragment;
    "collectionOfferCount(address)": FunctionFragment;
    "createAuthorizedOffer((uint32,uint32,uint32,uint32,address,string,bool,(uint256,address,address),(uint256,uint256,address,address,uint8)))": FunctionFragment;
    "createOffer((uint32,uint32,uint32,uint32,address,string,bool,(uint256,address,address),(uint256,uint256,address,address,uint8)))": FunctionFragment;
    "createSignedOffer((uint32,uint32,uint32,uint32,address,string,bool,(uint256,address,address),(uint256,uint256,address,address,uint8)),(bytes32,uint32,address,uint8,bytes32,bytes32))": FunctionFragment;
    "feeAddress()": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "getRoleMember(bytes32,uint256)": FunctionFragment;
    "getRoleMemberCount(bytes32)": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "initialize(address,address)": FunctionFragment;
    "offchainBuy(address,uint256,uint256,uint32)": FunctionFragment;
    "offers(address,uint256)": FunctionFragment;
    "offersByCollection(address,uint256)": FunctionFragment;
    "offersInCollection(address)": FunctionFragment;
    "offersOf(address)": FunctionFragment;
    "ownerOfferCount(address)": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "setCollection(address,uint256,string,bool)": FunctionFragment;
    "setCollectionStatus(address,bool)": FunctionFragment;
    "setOfferStatus(address,uint256,bool)": FunctionFragment;
    "setPaymentTokenStatus(address,bool)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "updatePrice(address,uint256,uint256)": FunctionFragment;
    "updateSupply(address,uint256,uint32)": FunctionFragment;
    "updateTime(address,uint256,uint32,uint32)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "ADMIN_ROLE"
      | "DEFAULT_ADMIN_ROLE"
      | "DOMAIN_SEPARATOR"
      | "MINTER_ROLE"
      | "OPERATOR_ROLE"
      | "allowedPaymentTokens"
      | "authorizationState"
      | "authorizedCollections"
      | "buy"
      | "collectionOfferCount"
      | "createAuthorizedOffer"
      | "createOffer"
      | "createSignedOffer"
      | "feeAddress"
      | "getRoleAdmin"
      | "getRoleMember"
      | "getRoleMemberCount"
      | "grantRole"
      | "hasRole"
      | "initialize"
      | "offchainBuy"
      | "offers"
      | "offersByCollection"
      | "offersInCollection"
      | "offersOf"
      | "ownerOfferCount"
      | "renounceRole"
      | "revokeRole"
      | "setCollection"
      | "setCollectionStatus"
      | "setOfferStatus"
      | "setPaymentTokenStatus"
      | "supportsInterface"
      | "updatePrice"
      | "updateSupply"
      | "updateTime"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DOMAIN_SEPARATOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MINTER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "OPERATOR_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "allowedPaymentTokens",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "authorizationState",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "authorizedCollections",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "buy",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "collectionOfferCount",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "createAuthorizedOffer",
    values: [Models.OfferRequestStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "createOffer",
    values: [Models.OfferRequestStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "createSignedOffer",
    values: [Models.OfferRequestStruct, Models.AuthorizationStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "feeAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleMember",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleMemberCount",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "offchainBuy",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "offers",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "offersByCollection",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "offersInCollection",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "offersOf",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "ownerOfferCount",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setCollection",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setCollectionStatus",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setOfferStatus",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setPaymentTokenStatus",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePrice",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "updateSupply",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "updateTime",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;

  decodeFunctionResult(functionFragment: "ADMIN_ROLE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DOMAIN_SEPARATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MINTER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "OPERATOR_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allowedPaymentTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "authorizationState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "authorizedCollections",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "buy", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "collectionOfferCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createAuthorizedOffer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createOffer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createSignedOffer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "feeAddress", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleMember",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleMemberCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "offchainBuy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "offers", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "offersByCollection",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "offersInCollection",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "offersOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ownerOfferCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setCollection",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCollectionStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setOfferStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPaymentTokenStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "updateTime", data: BytesLike): Result;

  events: {
    "AuthorizationUsed(address,bytes32)": EventFragment;
    "CollectionStatusChanged(address,bool)": EventFragment;
    "ContractAuthorizationChanged(address,bool,uint256,address)": EventFragment;
    "ItemBought(uint256,address,address,uint256,uint256,uint32)": EventFragment;
    "OfferCreated(uint256,tuple,address,address,address,address)": EventFragment;
    "OfferStateUpdated(address,uint256,bool)": EventFragment;
    "PaymentTokenStatusChanged(address,bool)": EventFragment;
    "PriceUpdated(address,uint256,uint256)": EventFragment;
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
    "SoldOut(uint256,uint256)": EventFragment;
    "SupplyUpdated(address,uint256,uint256)": EventFragment;
    "TimeUpdated(address,uint256,uint32,uint32)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AuthorizationUsed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CollectionStatusChanged"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "ContractAuthorizationChanged"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ItemBought"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OfferCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OfferStateUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PaymentTokenStatusChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PriceUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SoldOut"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SupplyUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TimeUpdated"): EventFragment;
}

export interface AuthorizationUsedEventObject {
  authorizer: string;
  nonce: string;
}
export type AuthorizationUsedEvent = TypedEvent<
  [string, string],
  AuthorizationUsedEventObject
>;

export type AuthorizationUsedEventFilter =
  TypedEventFilter<AuthorizationUsedEvent>;

export interface CollectionStatusChangedEventObject {
  nft: string;
  newState: boolean;
}
export type CollectionStatusChangedEvent = TypedEvent<
  [string, boolean],
  CollectionStatusChangedEventObject
>;

export type CollectionStatusChangedEventFilter =
  TypedEventFilter<CollectionStatusChangedEvent>;

export interface ContractAuthorizationChangedEventObject {
  nft: string;
  authorized: boolean;
  fee: BigNumber;
  admin: string;
}
export type ContractAuthorizationChangedEvent = TypedEvent<
  [string, boolean, BigNumber, string],
  ContractAuthorizationChangedEventObject
>;

export type ContractAuthorizationChangedEventFilter =
  TypedEventFilter<ContractAuthorizationChangedEvent>;

export interface ItemBoughtEventObject {
  offerId: BigNumber;
  buyer: string;
  owner: string;
  price: BigNumber;
  tokenId: BigNumber;
  units: number;
}
export type ItemBoughtEvent = TypedEvent<
  [BigNumber, string, string, BigNumber, BigNumber, number],
  ItemBoughtEventObject
>;

export type ItemBoughtEventFilter = TypedEventFilter<ItemBoughtEvent>;

export interface OfferCreatedEventObject {
  index: BigNumber;
  offer: Models.OfferStructOutput;
  owner: string;
  nft: string;
  lootbox: string;
  sender: string;
}
export type OfferCreatedEvent = TypedEvent<
  [BigNumber, Models.OfferStructOutput, string, string, string, string],
  OfferCreatedEventObject
>;

export type OfferCreatedEventFilter = TypedEventFilter<OfferCreatedEvent>;

export interface OfferStateUpdatedEventObject {
  owner: string;
  offerId: BigNumber;
  newState: boolean;
}
export type OfferStateUpdatedEvent = TypedEvent<
  [string, BigNumber, boolean],
  OfferStateUpdatedEventObject
>;

export type OfferStateUpdatedEventFilter =
  TypedEventFilter<OfferStateUpdatedEvent>;

export interface PaymentTokenStatusChangedEventObject {
  paymentToken: string;
  newState: boolean;
}
export type PaymentTokenStatusChangedEvent = TypedEvent<
  [string, boolean],
  PaymentTokenStatusChangedEventObject
>;

export type PaymentTokenStatusChangedEventFilter =
  TypedEventFilter<PaymentTokenStatusChangedEvent>;

export interface PriceUpdatedEventObject {
  owner: string;
  offerId: BigNumber;
  newPrice: BigNumber;
}
export type PriceUpdatedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  PriceUpdatedEventObject
>;

export type PriceUpdatedEventFilter = TypedEventFilter<PriceUpdatedEvent>;

export interface RoleAdminChangedEventObject {
  role: string;
  previousAdminRole: string;
  newAdminRole: string;
}
export type RoleAdminChangedEvent = TypedEvent<
  [string, string, string],
  RoleAdminChangedEventObject
>;

export type RoleAdminChangedEventFilter =
  TypedEventFilter<RoleAdminChangedEvent>;

export interface RoleGrantedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleGrantedEvent = TypedEvent<
  [string, string, string],
  RoleGrantedEventObject
>;

export type RoleGrantedEventFilter = TypedEventFilter<RoleGrantedEvent>;

export interface RoleRevokedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleRevokedEvent = TypedEvent<
  [string, string, string],
  RoleRevokedEventObject
>;

export type RoleRevokedEventFilter = TypedEventFilter<RoleRevokedEvent>;

export interface SoldOutEventObject {
  offerId: BigNumber;
  timestamp: BigNumber;
}
export type SoldOutEvent = TypedEvent<
  [BigNumber, BigNumber],
  SoldOutEventObject
>;

export type SoldOutEventFilter = TypedEventFilter<SoldOutEvent>;

export interface SupplyUpdatedEventObject {
  owner: string;
  offerId: BigNumber;
  newSupply: BigNumber;
}
export type SupplyUpdatedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  SupplyUpdatedEventObject
>;

export type SupplyUpdatedEventFilter = TypedEventFilter<SupplyUpdatedEvent>;

export interface TimeUpdatedEventObject {
  owner: string;
  offerId: BigNumber;
  startTime: number;
  endTime: number;
}
export type TimeUpdatedEvent = TypedEvent<
  [string, BigNumber, number, number],
  TimeUpdatedEventObject
>;

export type TimeUpdatedEventFilter = TypedEventFilter<TimeUpdatedEvent>;

export interface RarumSales extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: RarumSalesInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<[string]>;

    MINTER_ROLE(overrides?: CallOverrides): Promise<[string]>;

    OPERATOR_ROLE(overrides?: CallOverrides): Promise<[string]>;

    allowedPaymentTokens(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    authorizationState(
      authorizer: PromiseOrValue<string>,
      authorization: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    authorizedCollections(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, boolean, boolean] & {
        fee: BigNumber;
        metadataURI: string;
        authorized: boolean;
        created: boolean;
      }
    >;

    buy(
      _owner: PromiseOrValue<string>,
      _offerId: PromiseOrValue<BigNumberish>,
      _maxPrice: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    collectionOfferCount(
      _nft: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    createAuthorizedOffer(
      _offer: Models.OfferRequestStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createOffer(
      _offer: Models.OfferRequestStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createSignedOffer(
      _offer: Models.OfferRequestStruct,
      _authorization: Models.AuthorizationStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    feeAddress(overrides?: CallOverrides): Promise<[string]>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getRoleMember(
      role: PromiseOrValue<BytesLike>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getRoleMemberCount(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    initialize(
      _operator: PromiseOrValue<string>,
      _feeAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    offchainBuy(
      _to: PromiseOrValue<string>,
      _offerId: PromiseOrValue<BigNumberish>,
      _maxPrice: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    offers(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        number,
        number,
        number,
        number,
        number,
        string,
        string,
        boolean,
        boolean,
        number,
        Models.PaymentOptionsStructOutput,
        Models.DeliveryOptionsStructOutput
      ] & {
        id: BigNumber;
        supply: number;
        totalSold: number;
        maxUnitsPerPurchase: number;
        startTime: number;
        endTime: number;
        owner: string;
        metadataURI: string;
        active: boolean;
        fromTenant: boolean;
        offerType: number;
        paymentOptions: Models.PaymentOptionsStructOutput;
        deliveryOptions: Models.DeliveryOptionsStructOutput;
      }
    >;

    offersByCollection(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        number,
        number,
        number,
        number,
        number,
        string,
        string,
        boolean,
        boolean,
        number,
        Models.PaymentOptionsStructOutput,
        Models.DeliveryOptionsStructOutput
      ] & {
        id: BigNumber;
        supply: number;
        totalSold: number;
        maxUnitsPerPurchase: number;
        startTime: number;
        endTime: number;
        owner: string;
        metadataURI: string;
        active: boolean;
        fromTenant: boolean;
        offerType: number;
        paymentOptions: Models.PaymentOptionsStructOutput;
        deliveryOptions: Models.DeliveryOptionsStructOutput;
      }
    >;

    offersInCollection(
      _nft: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[Models.OfferStructOutput[]]>;

    offersOf(
      _owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[Models.OfferStructOutput[]]>;

    ownerOfferCount(
      _owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setCollection(
      _nft: PromiseOrValue<string>,
      _fee: PromiseOrValue<BigNumberish>,
      _metadataURI: PromiseOrValue<string>,
      _authorized: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setCollectionStatus(
      _nft: PromiseOrValue<string>,
      _newState: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setOfferStatus(
      _owner: PromiseOrValue<string>,
      _offerId: PromiseOrValue<BigNumberish>,
      _newState: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPaymentTokenStatus(
      _paymentToken: PromiseOrValue<string>,
      _newState: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    updatePrice(
      _owner: PromiseOrValue<string>,
      _offerId: PromiseOrValue<BigNumberish>,
      _newPrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateSupply(
      _owner: PromiseOrValue<string>,
      _offerId: PromiseOrValue<BigNumberish>,
      _newSupply: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateTime(
      _owner: PromiseOrValue<string>,
      _offerId: PromiseOrValue<BigNumberish>,
      _startTime: PromiseOrValue<BigNumberish>,
      _endTime: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;

  MINTER_ROLE(overrides?: CallOverrides): Promise<string>;

  OPERATOR_ROLE(overrides?: CallOverrides): Promise<string>;

  allowedPaymentTokens(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  authorizationState(
    authorizer: PromiseOrValue<string>,
    authorization: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  authorizedCollections(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, string, boolean, boolean] & {
      fee: BigNumber;
      metadataURI: string;
      authorized: boolean;
      created: boolean;
    }
  >;

  buy(
    _owner: PromiseOrValue<string>,
    _offerId: PromiseOrValue<BigNumberish>,
    _maxPrice: PromiseOrValue<BigNumberish>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  collectionOfferCount(
    _nft: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  createAuthorizedOffer(
    _offer: Models.OfferRequestStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createOffer(
    _offer: Models.OfferRequestStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createSignedOffer(
    _offer: Models.OfferRequestStruct,
    _authorization: Models.AuthorizationStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  feeAddress(overrides?: CallOverrides): Promise<string>;

  getRoleAdmin(
    role: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  getRoleMember(
    role: PromiseOrValue<BytesLike>,
    index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getRoleMemberCount(
    role: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  grantRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  hasRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  initialize(
    _operator: PromiseOrValue<string>,
    _feeAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  offchainBuy(
    _to: PromiseOrValue<string>,
    _offerId: PromiseOrValue<BigNumberish>,
    _maxPrice: PromiseOrValue<BigNumberish>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  offers(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      number,
      number,
      number,
      number,
      number,
      string,
      string,
      boolean,
      boolean,
      number,
      Models.PaymentOptionsStructOutput,
      Models.DeliveryOptionsStructOutput
    ] & {
      id: BigNumber;
      supply: number;
      totalSold: number;
      maxUnitsPerPurchase: number;
      startTime: number;
      endTime: number;
      owner: string;
      metadataURI: string;
      active: boolean;
      fromTenant: boolean;
      offerType: number;
      paymentOptions: Models.PaymentOptionsStructOutput;
      deliveryOptions: Models.DeliveryOptionsStructOutput;
    }
  >;

  offersByCollection(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      number,
      number,
      number,
      number,
      number,
      string,
      string,
      boolean,
      boolean,
      number,
      Models.PaymentOptionsStructOutput,
      Models.DeliveryOptionsStructOutput
    ] & {
      id: BigNumber;
      supply: number;
      totalSold: number;
      maxUnitsPerPurchase: number;
      startTime: number;
      endTime: number;
      owner: string;
      metadataURI: string;
      active: boolean;
      fromTenant: boolean;
      offerType: number;
      paymentOptions: Models.PaymentOptionsStructOutput;
      deliveryOptions: Models.DeliveryOptionsStructOutput;
    }
  >;

  offersInCollection(
    _nft: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<Models.OfferStructOutput[]>;

  offersOf(
    _owner: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<Models.OfferStructOutput[]>;

  ownerOfferCount(
    _owner: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  renounceRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  revokeRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setCollection(
    _nft: PromiseOrValue<string>,
    _fee: PromiseOrValue<BigNumberish>,
    _metadataURI: PromiseOrValue<string>,
    _authorized: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setCollectionStatus(
    _nft: PromiseOrValue<string>,
    _newState: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setOfferStatus(
    _owner: PromiseOrValue<string>,
    _offerId: PromiseOrValue<BigNumberish>,
    _newState: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPaymentTokenStatus(
    _paymentToken: PromiseOrValue<string>,
    _newState: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  updatePrice(
    _owner: PromiseOrValue<string>,
    _offerId: PromiseOrValue<BigNumberish>,
    _newPrice: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateSupply(
    _owner: PromiseOrValue<string>,
    _offerId: PromiseOrValue<BigNumberish>,
    _newSupply: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateTime(
    _owner: PromiseOrValue<string>,
    _offerId: PromiseOrValue<BigNumberish>,
    _startTime: PromiseOrValue<BigNumberish>,
    _endTime: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;

    MINTER_ROLE(overrides?: CallOverrides): Promise<string>;

    OPERATOR_ROLE(overrides?: CallOverrides): Promise<string>;

    allowedPaymentTokens(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    authorizationState(
      authorizer: PromiseOrValue<string>,
      authorization: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    authorizedCollections(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, boolean, boolean] & {
        fee: BigNumber;
        metadataURI: string;
        authorized: boolean;
        created: boolean;
      }
    >;

    buy(
      _owner: PromiseOrValue<string>,
      _offerId: PromiseOrValue<BigNumberish>,
      _maxPrice: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    collectionOfferCount(
      _nft: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createAuthorizedOffer(
      _offer: Models.OfferRequestStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    createOffer(
      _offer: Models.OfferRequestStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    createSignedOffer(
      _offer: Models.OfferRequestStruct,
      _authorization: Models.AuthorizationStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    feeAddress(overrides?: CallOverrides): Promise<string>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    getRoleMember(
      role: PromiseOrValue<BytesLike>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getRoleMemberCount(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    initialize(
      _operator: PromiseOrValue<string>,
      _feeAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    offchainBuy(
      _to: PromiseOrValue<string>,
      _offerId: PromiseOrValue<BigNumberish>,
      _maxPrice: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    offers(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        number,
        number,
        number,
        number,
        number,
        string,
        string,
        boolean,
        boolean,
        number,
        Models.PaymentOptionsStructOutput,
        Models.DeliveryOptionsStructOutput
      ] & {
        id: BigNumber;
        supply: number;
        totalSold: number;
        maxUnitsPerPurchase: number;
        startTime: number;
        endTime: number;
        owner: string;
        metadataURI: string;
        active: boolean;
        fromTenant: boolean;
        offerType: number;
        paymentOptions: Models.PaymentOptionsStructOutput;
        deliveryOptions: Models.DeliveryOptionsStructOutput;
      }
    >;

    offersByCollection(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        number,
        number,
        number,
        number,
        number,
        string,
        string,
        boolean,
        boolean,
        number,
        Models.PaymentOptionsStructOutput,
        Models.DeliveryOptionsStructOutput
      ] & {
        id: BigNumber;
        supply: number;
        totalSold: number;
        maxUnitsPerPurchase: number;
        startTime: number;
        endTime: number;
        owner: string;
        metadataURI: string;
        active: boolean;
        fromTenant: boolean;
        offerType: number;
        paymentOptions: Models.PaymentOptionsStructOutput;
        deliveryOptions: Models.DeliveryOptionsStructOutput;
      }
    >;

    offersInCollection(
      _nft: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<Models.OfferStructOutput[]>;

    offersOf(
      _owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<Models.OfferStructOutput[]>;

    ownerOfferCount(
      _owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setCollection(
      _nft: PromiseOrValue<string>,
      _fee: PromiseOrValue<BigNumberish>,
      _metadataURI: PromiseOrValue<string>,
      _authorized: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setCollectionStatus(
      _nft: PromiseOrValue<string>,
      _newState: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setOfferStatus(
      _owner: PromiseOrValue<string>,
      _offerId: PromiseOrValue<BigNumberish>,
      _newState: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setPaymentTokenStatus(
      _paymentToken: PromiseOrValue<string>,
      _newState: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    updatePrice(
      _owner: PromiseOrValue<string>,
      _offerId: PromiseOrValue<BigNumberish>,
      _newPrice: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateSupply(
      _owner: PromiseOrValue<string>,
      _offerId: PromiseOrValue<BigNumberish>,
      _newSupply: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateTime(
      _owner: PromiseOrValue<string>,
      _offerId: PromiseOrValue<BigNumberish>,
      _startTime: PromiseOrValue<BigNumberish>,
      _endTime: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AuthorizationUsed(address,bytes32)"(
      authorizer?: PromiseOrValue<string> | null,
      nonce?: PromiseOrValue<BytesLike> | null
    ): AuthorizationUsedEventFilter;
    AuthorizationUsed(
      authorizer?: PromiseOrValue<string> | null,
      nonce?: PromiseOrValue<BytesLike> | null
    ): AuthorizationUsedEventFilter;

    "CollectionStatusChanged(address,bool)"(
      nft?: PromiseOrValue<string> | null,
      newState?: null
    ): CollectionStatusChangedEventFilter;
    CollectionStatusChanged(
      nft?: PromiseOrValue<string> | null,
      newState?: null
    ): CollectionStatusChangedEventFilter;

    "ContractAuthorizationChanged(address,bool,uint256,address)"(
      nft?: null,
      authorized?: null,
      fee?: null,
      admin?: null
    ): ContractAuthorizationChangedEventFilter;
    ContractAuthorizationChanged(
      nft?: null,
      authorized?: null,
      fee?: null,
      admin?: null
    ): ContractAuthorizationChangedEventFilter;

    "ItemBought(uint256,address,address,uint256,uint256,uint32)"(
      offerId?: PromiseOrValue<BigNumberish> | null,
      buyer?: PromiseOrValue<string> | null,
      owner?: PromiseOrValue<string> | null,
      price?: null,
      tokenId?: null,
      units?: null
    ): ItemBoughtEventFilter;
    ItemBought(
      offerId?: PromiseOrValue<BigNumberish> | null,
      buyer?: PromiseOrValue<string> | null,
      owner?: PromiseOrValue<string> | null,
      price?: null,
      tokenId?: null,
      units?: null
    ): ItemBoughtEventFilter;

    "OfferCreated(uint256,tuple,address,address,address,address)"(
      index?: null,
      offer?: null,
      owner?: PromiseOrValue<string> | null,
      nft?: PromiseOrValue<string> | null,
      lootbox?: PromiseOrValue<string> | null,
      sender?: null
    ): OfferCreatedEventFilter;
    OfferCreated(
      index?: null,
      offer?: null,
      owner?: PromiseOrValue<string> | null,
      nft?: PromiseOrValue<string> | null,
      lootbox?: PromiseOrValue<string> | null,
      sender?: null
    ): OfferCreatedEventFilter;

    "OfferStateUpdated(address,uint256,bool)"(
      owner?: null,
      offerId?: PromiseOrValue<BigNumberish> | null,
      newState?: null
    ): OfferStateUpdatedEventFilter;
    OfferStateUpdated(
      owner?: null,
      offerId?: PromiseOrValue<BigNumberish> | null,
      newState?: null
    ): OfferStateUpdatedEventFilter;

    "PaymentTokenStatusChanged(address,bool)"(
      paymentToken?: PromiseOrValue<string> | null,
      newState?: null
    ): PaymentTokenStatusChangedEventFilter;
    PaymentTokenStatusChanged(
      paymentToken?: PromiseOrValue<string> | null,
      newState?: null
    ): PaymentTokenStatusChangedEventFilter;

    "PriceUpdated(address,uint256,uint256)"(
      owner?: null,
      offerId?: PromiseOrValue<BigNumberish> | null,
      newPrice?: null
    ): PriceUpdatedEventFilter;
    PriceUpdated(
      owner?: null,
      offerId?: PromiseOrValue<BigNumberish> | null,
      newPrice?: null
    ): PriceUpdatedEventFilter;

    "RoleAdminChanged(bytes32,bytes32,bytes32)"(
      role?: PromiseOrValue<BytesLike> | null,
      previousAdminRole?: PromiseOrValue<BytesLike> | null,
      newAdminRole?: PromiseOrValue<BytesLike> | null
    ): RoleAdminChangedEventFilter;
    RoleAdminChanged(
      role?: PromiseOrValue<BytesLike> | null,
      previousAdminRole?: PromiseOrValue<BytesLike> | null,
      newAdminRole?: PromiseOrValue<BytesLike> | null
    ): RoleAdminChangedEventFilter;

    "RoleGranted(bytes32,address,address)"(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleGrantedEventFilter;
    RoleGranted(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleGrantedEventFilter;

    "RoleRevoked(bytes32,address,address)"(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleRevokedEventFilter;
    RoleRevoked(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleRevokedEventFilter;

    "SoldOut(uint256,uint256)"(
      offerId?: PromiseOrValue<BigNumberish> | null,
      timestamp?: null
    ): SoldOutEventFilter;
    SoldOut(
      offerId?: PromiseOrValue<BigNumberish> | null,
      timestamp?: null
    ): SoldOutEventFilter;

    "SupplyUpdated(address,uint256,uint256)"(
      owner?: null,
      offerId?: PromiseOrValue<BigNumberish> | null,
      newSupply?: null
    ): SupplyUpdatedEventFilter;
    SupplyUpdated(
      owner?: null,
      offerId?: PromiseOrValue<BigNumberish> | null,
      newSupply?: null
    ): SupplyUpdatedEventFilter;

    "TimeUpdated(address,uint256,uint32,uint32)"(
      owner?: null,
      offerId?: PromiseOrValue<BigNumberish> | null,
      startTime?: null,
      endTime?: null
    ): TimeUpdatedEventFilter;
    TimeUpdated(
      owner?: null,
      offerId?: PromiseOrValue<BigNumberish> | null,
      startTime?: null,
      endTime?: null
    ): TimeUpdatedEventFilter;
  };

  estimateGas: {
    ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<BigNumber>;

    MINTER_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    OPERATOR_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    allowedPaymentTokens(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    authorizationState(
      authorizer: PromiseOrValue<string>,
      authorization: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    authorizedCollections(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    buy(
      _owner: PromiseOrValue<string>,
      _offerId: PromiseOrValue<BigNumberish>,
      _maxPrice: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    collectionOfferCount(
      _nft: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createAuthorizedOffer(
      _offer: Models.OfferRequestStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createOffer(
      _offer: Models.OfferRequestStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createSignedOffer(
      _offer: Models.OfferRequestStruct,
      _authorization: Models.AuthorizationStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    feeAddress(overrides?: CallOverrides): Promise<BigNumber>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleMember(
      role: PromiseOrValue<BytesLike>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleMemberCount(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _operator: PromiseOrValue<string>,
      _feeAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    offchainBuy(
      _to: PromiseOrValue<string>,
      _offerId: PromiseOrValue<BigNumberish>,
      _maxPrice: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    offers(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    offersByCollection(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    offersInCollection(
      _nft: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    offersOf(
      _owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ownerOfferCount(
      _owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setCollection(
      _nft: PromiseOrValue<string>,
      _fee: PromiseOrValue<BigNumberish>,
      _metadataURI: PromiseOrValue<string>,
      _authorized: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setCollectionStatus(
      _nft: PromiseOrValue<string>,
      _newState: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setOfferStatus(
      _owner: PromiseOrValue<string>,
      _offerId: PromiseOrValue<BigNumberish>,
      _newState: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPaymentTokenStatus(
      _paymentToken: PromiseOrValue<string>,
      _newState: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    updatePrice(
      _owner: PromiseOrValue<string>,
      _offerId: PromiseOrValue<BigNumberish>,
      _newPrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateSupply(
      _owner: PromiseOrValue<string>,
      _offerId: PromiseOrValue<BigNumberish>,
      _newSupply: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateTime(
      _owner: PromiseOrValue<string>,
      _offerId: PromiseOrValue<BigNumberish>,
      _startTime: PromiseOrValue<BigNumberish>,
      _endTime: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    ADMIN_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MINTER_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    OPERATOR_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    allowedPaymentTokens(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    authorizationState(
      authorizer: PromiseOrValue<string>,
      authorization: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    authorizedCollections(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    buy(
      _owner: PromiseOrValue<string>,
      _offerId: PromiseOrValue<BigNumberish>,
      _maxPrice: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    collectionOfferCount(
      _nft: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    createAuthorizedOffer(
      _offer: Models.OfferRequestStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createOffer(
      _offer: Models.OfferRequestStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createSignedOffer(
      _offer: Models.OfferRequestStruct,
      _authorization: Models.AuthorizationStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    feeAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleMember(
      role: PromiseOrValue<BytesLike>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleMemberCount(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _operator: PromiseOrValue<string>,
      _feeAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    offchainBuy(
      _to: PromiseOrValue<string>,
      _offerId: PromiseOrValue<BigNumberish>,
      _maxPrice: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    offers(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    offersByCollection(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    offersInCollection(
      _nft: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    offersOf(
      _owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ownerOfferCount(
      _owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setCollection(
      _nft: PromiseOrValue<string>,
      _fee: PromiseOrValue<BigNumberish>,
      _metadataURI: PromiseOrValue<string>,
      _authorized: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setCollectionStatus(
      _nft: PromiseOrValue<string>,
      _newState: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setOfferStatus(
      _owner: PromiseOrValue<string>,
      _offerId: PromiseOrValue<BigNumberish>,
      _newState: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPaymentTokenStatus(
      _paymentToken: PromiseOrValue<string>,
      _newState: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    updatePrice(
      _owner: PromiseOrValue<string>,
      _offerId: PromiseOrValue<BigNumberish>,
      _newPrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateSupply(
      _owner: PromiseOrValue<string>,
      _offerId: PromiseOrValue<BigNumberish>,
      _newSupply: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateTime(
      _owner: PromiseOrValue<string>,
      _offerId: PromiseOrValue<BigNumberish>,
      _startTime: PromiseOrValue<BigNumberish>,
      _endTime: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
