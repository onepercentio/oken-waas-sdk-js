/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace RarumNFTAuction {
  export type AuctionStruct = {
    amount: PromiseOrValue<BigNumberish>;
    tokenId: PromiseOrValue<BigNumberish>;
    bidIncreasePercentage: PromiseOrValue<BigNumberish>;
    bidExtendPeriod: PromiseOrValue<BigNumberish>;
    minPrice: PromiseOrValue<BigNumberish>;
    minNextBid: PromiseOrValue<BigNumberish>;
    start: PromiseOrValue<BigNumberish>;
    end: PromiseOrValue<BigNumberish>;
    highestBid: PromiseOrValue<BigNumberish>;
    highestBidder: PromiseOrValue<string>;
    nftContractAddress: PromiseOrValue<string>;
    nftSeller: PromiseOrValue<string>;
    ERC20Token: PromiseOrValue<string>;
    feeRecipients: PromiseOrValue<string>[];
    feePercentages: PromiseOrValue<BigNumberish>[];
    status: PromiseOrValue<BigNumberish>;
  };

  export type AuctionStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    string,
    string,
    string,
    string[],
    number[],
    number
  ] & {
    amount: BigNumber;
    tokenId: BigNumber;
    bidIncreasePercentage: BigNumber;
    bidExtendPeriod: BigNumber;
    minPrice: BigNumber;
    minNextBid: BigNumber;
    start: BigNumber;
    end: BigNumber;
    highestBid: BigNumber;
    highestBidder: string;
    nftContractAddress: string;
    nftSeller: string;
    ERC20Token: string;
    feeRecipients: string[];
    feePercentages: number[];
    status: number;
  };

  export type NewAuctionRequestStruct = {
    nftContractAddress: PromiseOrValue<string>;
    tokenId: PromiseOrValue<BigNumberish>;
    amount: PromiseOrValue<BigNumberish>;
    erc20Token: PromiseOrValue<string>;
    minPrice: PromiseOrValue<BigNumberish>;
    start: PromiseOrValue<BigNumberish>;
    end: PromiseOrValue<BigNumberish>;
    bidIncreasePercentage: PromiseOrValue<BigNumberish>;
    bidExtendPeriod: PromiseOrValue<BigNumberish>;
    feeRecipients: PromiseOrValue<string>[];
    feePercentages: PromiseOrValue<BigNumberish>[];
  };

  export type NewAuctionRequestStructOutput = [
    string,
    BigNumber,
    BigNumber,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    string[],
    number[]
  ] & {
    nftContractAddress: string;
    tokenId: BigNumber;
    amount: BigNumber;
    erc20Token: string;
    minPrice: BigNumber;
    start: BigNumber;
    end: BigNumber;
    bidIncreasePercentage: BigNumber;
    bidExtendPeriod: BigNumber;
    feeRecipients: string[];
    feePercentages: number[];
  };
}

export interface RarumNFTAuctionInterface extends utils.Interface {
  functions: {
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "ONE_HOUR()": FunctionFragment;
    "OPERATOR_ROLE()": FunctionFragment;
    "__ERC1155_init_unchained()": FunctionFragment;
    "__RarumNFTAuction_init()": FunctionFragment;
    "_ids()": FunctionFragment;
    "auctions(uint256)": FunctionFragment;
    "authorizedAuction((address,uint256,uint256,address,uint256,uint256,uint256,uint128,uint128,address[],uint32[]),address)": FunctionFragment;
    "authorizedBid(uint256,address,uint256,address)": FunctionFragment;
    "authorizedUpdateMinimumPrice(uint256,address,uint256)": FunctionFragment;
    "authorizedWithdrawAuction(uint256,address)": FunctionFragment;
    "bidPercentageConversionFactor()": FunctionFragment;
    "defaultBidExtendPeriod()": FunctionFragment;
    "defaultBidIncreasePercentage()": FunctionFragment;
    "getActiveAuctionsByHolder(address)": FunctionFragment;
    "getActiveAuctionsByToken(address,uint256)": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "getRoleMember(bytes32,uint256)": FunctionFragment;
    "getRoleMemberCount(bytes32)": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "initialize()": FunctionFragment;
    "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)": FunctionFragment;
    "onERC1155Received(address,address,uint256,uint256,bytes)": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "settleAuction(uint256)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "takeHighestBid(uint256,address)": FunctionFragment;
    "updateExtendBidPeriod(uint32)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "DEFAULT_ADMIN_ROLE"
      | "ONE_HOUR"
      | "OPERATOR_ROLE"
      | "__ERC1155_init_unchained"
      | "__RarumNFTAuction_init"
      | "_ids"
      | "auctions"
      | "authorizedAuction"
      | "authorizedBid"
      | "authorizedUpdateMinimumPrice"
      | "authorizedWithdrawAuction"
      | "bidPercentageConversionFactor"
      | "defaultBidExtendPeriod"
      | "defaultBidIncreasePercentage"
      | "getActiveAuctionsByHolder"
      | "getActiveAuctionsByToken"
      | "getRoleAdmin"
      | "getRoleMember"
      | "getRoleMemberCount"
      | "grantRole"
      | "hasRole"
      | "initialize"
      | "onERC1155BatchReceived"
      | "onERC1155Received"
      | "renounceRole"
      | "revokeRole"
      | "settleAuction"
      | "supportsInterface"
      | "takeHighestBid"
      | "updateExtendBidPeriod"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "ONE_HOUR", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "OPERATOR_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "__ERC1155_init_unchained",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "__RarumNFTAuction_init",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "_ids", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "auctions",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "authorizedAuction",
    values: [RarumNFTAuction.NewAuctionRequestStruct, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "authorizedBid",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "authorizedUpdateMinimumPrice",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "authorizedWithdrawAuction",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "bidPercentageConversionFactor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "defaultBidExtendPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "defaultBidIncreasePercentage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getActiveAuctionsByHolder",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getActiveAuctionsByToken",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleMember",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleMemberCount",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "onERC1155BatchReceived",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC1155Received",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "settleAuction",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "takeHighestBid",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateExtendBidPeriod",
    values: [PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ONE_HOUR", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "OPERATOR_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "__ERC1155_init_unchained",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "__RarumNFTAuction_init",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "_ids", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "auctions", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "authorizedAuction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "authorizedBid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "authorizedUpdateMinimumPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "authorizedWithdrawAuction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bidPercentageConversionFactor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "defaultBidExtendPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "defaultBidIncreasePercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getActiveAuctionsByHolder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getActiveAuctionsByToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleMember",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleMemberCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "onERC1155BatchReceived",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC1155Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "settleAuction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "takeHighestBid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateExtendBidPeriod",
    data: BytesLike
  ): Result;

  events: {
    "AuctionEndUpdated(uint256,uint256)": EventFragment;
    "AuctionSettled(address,uint256,address)": EventFragment;
    "AuctionWithdrawn(address,uint256,address)": EventFragment;
    "BidMade(address,uint256,uint256,address,address,uint256)": EventFragment;
    "BuyNowPriceUpdated(address,uint256,uint256)": EventFragment;
    "HighestBidTaken(uint256,address,uint256)": EventFragment;
    "MinimumPriceUpdated(uint256,uint256)": EventFragment;
    "NFTTransferredAndSellerPaid(address,uint256,uint256,address,uint256,address)": EventFragment;
    "NftAuctionCreated(uint256,tuple)": EventFragment;
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AuctionEndUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AuctionSettled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AuctionWithdrawn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BidMade"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BuyNowPriceUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "HighestBidTaken"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MinimumPriceUpdated"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "NFTTransferredAndSellerPaid"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NftAuctionCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
}

export interface AuctionEndUpdatedEventObject {
  auctionId: BigNumber;
  auctionEnd: BigNumber;
}
export type AuctionEndUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber],
  AuctionEndUpdatedEventObject
>;

export type AuctionEndUpdatedEventFilter =
  TypedEventFilter<AuctionEndUpdatedEvent>;

export interface AuctionSettledEventObject {
  nftContractAddress: string;
  tokenId: BigNumber;
  auctionSettler: string;
}
export type AuctionSettledEvent = TypedEvent<
  [string, BigNumber, string],
  AuctionSettledEventObject
>;

export type AuctionSettledEventFilter = TypedEventFilter<AuctionSettledEvent>;

export interface AuctionWithdrawnEventObject {
  nftContractAddress: string;
  tokenId: BigNumber;
  nftOwner: string;
}
export type AuctionWithdrawnEvent = TypedEvent<
  [string, BigNumber, string],
  AuctionWithdrawnEventObject
>;

export type AuctionWithdrawnEventFilter =
  TypedEventFilter<AuctionWithdrawnEvent>;

export interface BidMadeEventObject {
  nftContractAddress: string;
  tokenId: BigNumber;
  auctionId: BigNumber;
  bidder: string;
  erc20Token: string;
  tokenAmount: BigNumber;
}
export type BidMadeEvent = TypedEvent<
  [string, BigNumber, BigNumber, string, string, BigNumber],
  BidMadeEventObject
>;

export type BidMadeEventFilter = TypedEventFilter<BidMadeEvent>;

export interface BuyNowPriceUpdatedEventObject {
  nftContractAddress: string;
  tokenId: BigNumber;
  newBuyNowPrice: BigNumber;
}
export type BuyNowPriceUpdatedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  BuyNowPriceUpdatedEventObject
>;

export type BuyNowPriceUpdatedEventFilter =
  TypedEventFilter<BuyNowPriceUpdatedEvent>;

export interface HighestBidTakenEventObject {
  auctionId: BigNumber;
  bidder: string;
  bid: BigNumber;
}
export type HighestBidTakenEvent = TypedEvent<
  [BigNumber, string, BigNumber],
  HighestBidTakenEventObject
>;

export type HighestBidTakenEventFilter = TypedEventFilter<HighestBidTakenEvent>;

export interface MinimumPriceUpdatedEventObject {
  auctionId: BigNumber;
  newMinPrice: BigNumber;
}
export type MinimumPriceUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber],
  MinimumPriceUpdatedEventObject
>;

export type MinimumPriceUpdatedEventFilter =
  TypedEventFilter<MinimumPriceUpdatedEvent>;

export interface NFTTransferredAndSellerPaidEventObject {
  nftContractAddress: string;
  tokenId: BigNumber;
  amount: BigNumber;
  nftSeller: string;
  highestBid: BigNumber;
  highestBidder: string;
}
export type NFTTransferredAndSellerPaidEvent = TypedEvent<
  [string, BigNumber, BigNumber, string, BigNumber, string],
  NFTTransferredAndSellerPaidEventObject
>;

export type NFTTransferredAndSellerPaidEventFilter =
  TypedEventFilter<NFTTransferredAndSellerPaidEvent>;

export interface NftAuctionCreatedEventObject {
  auctionId: BigNumber;
  auction: RarumNFTAuction.AuctionStructOutput;
}
export type NftAuctionCreatedEvent = TypedEvent<
  [BigNumber, RarumNFTAuction.AuctionStructOutput],
  NftAuctionCreatedEventObject
>;

export type NftAuctionCreatedEventFilter =
  TypedEventFilter<NftAuctionCreatedEvent>;

export interface RoleAdminChangedEventObject {
  role: string;
  previousAdminRole: string;
  newAdminRole: string;
}
export type RoleAdminChangedEvent = TypedEvent<
  [string, string, string],
  RoleAdminChangedEventObject
>;

export type RoleAdminChangedEventFilter =
  TypedEventFilter<RoleAdminChangedEvent>;

export interface RoleGrantedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleGrantedEvent = TypedEvent<
  [string, string, string],
  RoleGrantedEventObject
>;

export type RoleGrantedEventFilter = TypedEventFilter<RoleGrantedEvent>;

export interface RoleRevokedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleRevokedEvent = TypedEvent<
  [string, string, string],
  RoleRevokedEventObject
>;

export type RoleRevokedEventFilter = TypedEventFilter<RoleRevokedEvent>;

export interface RarumNFTAuction extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: RarumNFTAuctionInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    ONE_HOUR(overrides?: CallOverrides): Promise<[number]>;

    OPERATOR_ROLE(overrides?: CallOverrides): Promise<[string]>;

    __ERC1155_init_unchained(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    __RarumNFTAuction_init(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    _ids(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _value: BigNumber }>;

    auctions(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        string,
        string,
        string,
        number
      ] & {
        amount: BigNumber;
        tokenId: BigNumber;
        bidIncreasePercentage: BigNumber;
        bidExtendPeriod: BigNumber;
        minPrice: BigNumber;
        minNextBid: BigNumber;
        start: BigNumber;
        end: BigNumber;
        highestBid: BigNumber;
        highestBidder: string;
        nftContractAddress: string;
        nftSeller: string;
        ERC20Token: string;
        status: number;
      }
    >;

    authorizedAuction(
      _newAuction: RarumNFTAuction.NewAuctionRequestStruct,
      _seller: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    authorizedBid(
      _auctionId: PromiseOrValue<BigNumberish>,
      _erc20Token: PromiseOrValue<string>,
      _tokenAmount: PromiseOrValue<BigNumberish>,
      _bidder: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    authorizedUpdateMinimumPrice(
      _auctionId: PromiseOrValue<BigNumberish>,
      _seller: PromiseOrValue<string>,
      _newMinPrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    authorizedWithdrawAuction(
      _auctionId: PromiseOrValue<BigNumberish>,
      _seller: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    bidPercentageConversionFactor(overrides?: CallOverrides): Promise<[number]>;

    defaultBidExtendPeriod(overrides?: CallOverrides): Promise<[number]>;

    defaultBidIncreasePercentage(overrides?: CallOverrides): Promise<[number]>;

    getActiveAuctionsByHolder(
      _holder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [RarumNFTAuction.AuctionStructOutput[]] & {
        activeAuctions: RarumNFTAuction.AuctionStructOutput[];
      }
    >;

    getActiveAuctionsByToken(
      _nftContractAddress: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[RarumNFTAuction.AuctionStructOutput[]]>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getRoleMember(
      role: PromiseOrValue<BytesLike>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getRoleMemberCount(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    initialize(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    onERC1155BatchReceived(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>[],
      arg3: PromiseOrValue<BigNumberish>[],
      arg4: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    onERC1155Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BigNumberish>,
      arg4: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    settleAuction(
      _auctionId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    takeHighestBid(
      _auctionId: PromiseOrValue<BigNumberish>,
      _seller: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateExtendBidPeriod(
      _newPeriod: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  ONE_HOUR(overrides?: CallOverrides): Promise<number>;

  OPERATOR_ROLE(overrides?: CallOverrides): Promise<string>;

  __ERC1155_init_unchained(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  __RarumNFTAuction_init(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  _ids(overrides?: CallOverrides): Promise<BigNumber>;

  auctions(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      string,
      string,
      string,
      string,
      number
    ] & {
      amount: BigNumber;
      tokenId: BigNumber;
      bidIncreasePercentage: BigNumber;
      bidExtendPeriod: BigNumber;
      minPrice: BigNumber;
      minNextBid: BigNumber;
      start: BigNumber;
      end: BigNumber;
      highestBid: BigNumber;
      highestBidder: string;
      nftContractAddress: string;
      nftSeller: string;
      ERC20Token: string;
      status: number;
    }
  >;

  authorizedAuction(
    _newAuction: RarumNFTAuction.NewAuctionRequestStruct,
    _seller: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  authorizedBid(
    _auctionId: PromiseOrValue<BigNumberish>,
    _erc20Token: PromiseOrValue<string>,
    _tokenAmount: PromiseOrValue<BigNumberish>,
    _bidder: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  authorizedUpdateMinimumPrice(
    _auctionId: PromiseOrValue<BigNumberish>,
    _seller: PromiseOrValue<string>,
    _newMinPrice: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  authorizedWithdrawAuction(
    _auctionId: PromiseOrValue<BigNumberish>,
    _seller: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  bidPercentageConversionFactor(overrides?: CallOverrides): Promise<number>;

  defaultBidExtendPeriod(overrides?: CallOverrides): Promise<number>;

  defaultBidIncreasePercentage(overrides?: CallOverrides): Promise<number>;

  getActiveAuctionsByHolder(
    _holder: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<RarumNFTAuction.AuctionStructOutput[]>;

  getActiveAuctionsByToken(
    _nftContractAddress: PromiseOrValue<string>,
    _tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<RarumNFTAuction.AuctionStructOutput[]>;

  getRoleAdmin(
    role: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  getRoleMember(
    role: PromiseOrValue<BytesLike>,
    index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getRoleMemberCount(
    role: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  grantRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  hasRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  initialize(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  onERC1155BatchReceived(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    arg2: PromiseOrValue<BigNumberish>[],
    arg3: PromiseOrValue<BigNumberish>[],
    arg4: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  onERC1155Received(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    arg2: PromiseOrValue<BigNumberish>,
    arg3: PromiseOrValue<BigNumberish>,
    arg4: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  revokeRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  settleAuction(
    _auctionId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  takeHighestBid(
    _auctionId: PromiseOrValue<BigNumberish>,
    _seller: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateExtendBidPeriod(
    _newPeriod: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    ONE_HOUR(overrides?: CallOverrides): Promise<number>;

    OPERATOR_ROLE(overrides?: CallOverrides): Promise<string>;

    __ERC1155_init_unchained(overrides?: CallOverrides): Promise<void>;

    __RarumNFTAuction_init(overrides?: CallOverrides): Promise<void>;

    _ids(overrides?: CallOverrides): Promise<BigNumber>;

    auctions(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        string,
        string,
        string,
        number
      ] & {
        amount: BigNumber;
        tokenId: BigNumber;
        bidIncreasePercentage: BigNumber;
        bidExtendPeriod: BigNumber;
        minPrice: BigNumber;
        minNextBid: BigNumber;
        start: BigNumber;
        end: BigNumber;
        highestBid: BigNumber;
        highestBidder: string;
        nftContractAddress: string;
        nftSeller: string;
        ERC20Token: string;
        status: number;
      }
    >;

    authorizedAuction(
      _newAuction: RarumNFTAuction.NewAuctionRequestStruct,
      _seller: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    authorizedBid(
      _auctionId: PromiseOrValue<BigNumberish>,
      _erc20Token: PromiseOrValue<string>,
      _tokenAmount: PromiseOrValue<BigNumberish>,
      _bidder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    authorizedUpdateMinimumPrice(
      _auctionId: PromiseOrValue<BigNumberish>,
      _seller: PromiseOrValue<string>,
      _newMinPrice: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    authorizedWithdrawAuction(
      _auctionId: PromiseOrValue<BigNumberish>,
      _seller: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    bidPercentageConversionFactor(overrides?: CallOverrides): Promise<number>;

    defaultBidExtendPeriod(overrides?: CallOverrides): Promise<number>;

    defaultBidIncreasePercentage(overrides?: CallOverrides): Promise<number>;

    getActiveAuctionsByHolder(
      _holder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<RarumNFTAuction.AuctionStructOutput[]>;

    getActiveAuctionsByToken(
      _nftContractAddress: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<RarumNFTAuction.AuctionStructOutput[]>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    getRoleMember(
      role: PromiseOrValue<BytesLike>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getRoleMemberCount(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    initialize(overrides?: CallOverrides): Promise<void>;

    onERC1155BatchReceived(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>[],
      arg3: PromiseOrValue<BigNumberish>[],
      arg4: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    onERC1155Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BigNumberish>,
      arg4: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    settleAuction(
      _auctionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    takeHighestBid(
      _auctionId: PromiseOrValue<BigNumberish>,
      _seller: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateExtendBidPeriod(
      _newPeriod: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AuctionEndUpdated(uint256,uint256)"(
      auctionId?: null,
      auctionEnd?: null
    ): AuctionEndUpdatedEventFilter;
    AuctionEndUpdated(
      auctionId?: null,
      auctionEnd?: null
    ): AuctionEndUpdatedEventFilter;

    "AuctionSettled(address,uint256,address)"(
      nftContractAddress?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null,
      auctionSettler?: PromiseOrValue<string> | null
    ): AuctionSettledEventFilter;
    AuctionSettled(
      nftContractAddress?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null,
      auctionSettler?: PromiseOrValue<string> | null
    ): AuctionSettledEventFilter;

    "AuctionWithdrawn(address,uint256,address)"(
      nftContractAddress?: null,
      tokenId?: null,
      nftOwner?: null
    ): AuctionWithdrawnEventFilter;
    AuctionWithdrawn(
      nftContractAddress?: null,
      tokenId?: null,
      nftOwner?: null
    ): AuctionWithdrawnEventFilter;

    "BidMade(address,uint256,uint256,address,address,uint256)"(
      nftContractAddress?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null,
      auctionId?: PromiseOrValue<BigNumberish> | null,
      bidder?: null,
      erc20Token?: null,
      tokenAmount?: null
    ): BidMadeEventFilter;
    BidMade(
      nftContractAddress?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null,
      auctionId?: PromiseOrValue<BigNumberish> | null,
      bidder?: null,
      erc20Token?: null,
      tokenAmount?: null
    ): BidMadeEventFilter;

    "BuyNowPriceUpdated(address,uint256,uint256)"(
      nftContractAddress?: null,
      tokenId?: null,
      newBuyNowPrice?: null
    ): BuyNowPriceUpdatedEventFilter;
    BuyNowPriceUpdated(
      nftContractAddress?: null,
      tokenId?: null,
      newBuyNowPrice?: null
    ): BuyNowPriceUpdatedEventFilter;

    "HighestBidTaken(uint256,address,uint256)"(
      auctionId?: null,
      bidder?: null,
      bid?: null
    ): HighestBidTakenEventFilter;
    HighestBidTaken(
      auctionId?: null,
      bidder?: null,
      bid?: null
    ): HighestBidTakenEventFilter;

    "MinimumPriceUpdated(uint256,uint256)"(
      auctionId?: null,
      newMinPrice?: null
    ): MinimumPriceUpdatedEventFilter;
    MinimumPriceUpdated(
      auctionId?: null,
      newMinPrice?: null
    ): MinimumPriceUpdatedEventFilter;

    "NFTTransferredAndSellerPaid(address,uint256,uint256,address,uint256,address)"(
      nftContractAddress?: null,
      tokenId?: null,
      amount?: null,
      nftSeller?: null,
      highestBid?: null,
      highestBidder?: null
    ): NFTTransferredAndSellerPaidEventFilter;
    NFTTransferredAndSellerPaid(
      nftContractAddress?: null,
      tokenId?: null,
      amount?: null,
      nftSeller?: null,
      highestBid?: null,
      highestBidder?: null
    ): NFTTransferredAndSellerPaidEventFilter;

    "NftAuctionCreated(uint256,tuple)"(
      auctionId?: PromiseOrValue<BigNumberish> | null,
      auction?: null
    ): NftAuctionCreatedEventFilter;
    NftAuctionCreated(
      auctionId?: PromiseOrValue<BigNumberish> | null,
      auction?: null
    ): NftAuctionCreatedEventFilter;

    "RoleAdminChanged(bytes32,bytes32,bytes32)"(
      role?: PromiseOrValue<BytesLike> | null,
      previousAdminRole?: PromiseOrValue<BytesLike> | null,
      newAdminRole?: PromiseOrValue<BytesLike> | null
    ): RoleAdminChangedEventFilter;
    RoleAdminChanged(
      role?: PromiseOrValue<BytesLike> | null,
      previousAdminRole?: PromiseOrValue<BytesLike> | null,
      newAdminRole?: PromiseOrValue<BytesLike> | null
    ): RoleAdminChangedEventFilter;

    "RoleGranted(bytes32,address,address)"(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleGrantedEventFilter;
    RoleGranted(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleGrantedEventFilter;

    "RoleRevoked(bytes32,address,address)"(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleRevokedEventFilter;
    RoleRevoked(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleRevokedEventFilter;
  };

  estimateGas: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    ONE_HOUR(overrides?: CallOverrides): Promise<BigNumber>;

    OPERATOR_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    __ERC1155_init_unchained(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    __RarumNFTAuction_init(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    _ids(overrides?: CallOverrides): Promise<BigNumber>;

    auctions(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    authorizedAuction(
      _newAuction: RarumNFTAuction.NewAuctionRequestStruct,
      _seller: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    authorizedBid(
      _auctionId: PromiseOrValue<BigNumberish>,
      _erc20Token: PromiseOrValue<string>,
      _tokenAmount: PromiseOrValue<BigNumberish>,
      _bidder: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    authorizedUpdateMinimumPrice(
      _auctionId: PromiseOrValue<BigNumberish>,
      _seller: PromiseOrValue<string>,
      _newMinPrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    authorizedWithdrawAuction(
      _auctionId: PromiseOrValue<BigNumberish>,
      _seller: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    bidPercentageConversionFactor(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    defaultBidExtendPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    defaultBidIncreasePercentage(overrides?: CallOverrides): Promise<BigNumber>;

    getActiveAuctionsByHolder(
      _holder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getActiveAuctionsByToken(
      _nftContractAddress: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleMember(
      role: PromiseOrValue<BytesLike>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleMemberCount(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    onERC1155BatchReceived(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>[],
      arg3: PromiseOrValue<BigNumberish>[],
      arg4: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    onERC1155Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BigNumberish>,
      arg4: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    settleAuction(
      _auctionId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    takeHighestBid(
      _auctionId: PromiseOrValue<BigNumberish>,
      _seller: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateExtendBidPeriod(
      _newPeriod: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ONE_HOUR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    OPERATOR_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    __ERC1155_init_unchained(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    __RarumNFTAuction_init(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    _ids(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    auctions(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    authorizedAuction(
      _newAuction: RarumNFTAuction.NewAuctionRequestStruct,
      _seller: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    authorizedBid(
      _auctionId: PromiseOrValue<BigNumberish>,
      _erc20Token: PromiseOrValue<string>,
      _tokenAmount: PromiseOrValue<BigNumberish>,
      _bidder: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    authorizedUpdateMinimumPrice(
      _auctionId: PromiseOrValue<BigNumberish>,
      _seller: PromiseOrValue<string>,
      _newMinPrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    authorizedWithdrawAuction(
      _auctionId: PromiseOrValue<BigNumberish>,
      _seller: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    bidPercentageConversionFactor(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    defaultBidExtendPeriod(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    defaultBidIncreasePercentage(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getActiveAuctionsByHolder(
      _holder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getActiveAuctionsByToken(
      _nftContractAddress: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleMember(
      role: PromiseOrValue<BytesLike>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleMemberCount(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    onERC1155BatchReceived(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>[],
      arg3: PromiseOrValue<BigNumberish>[],
      arg4: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    onERC1155Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BigNumberish>,
      arg4: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    settleAuction(
      _auctionId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    takeHighestBid(
      _auctionId: PromiseOrValue<BigNumberish>,
      _seller: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateExtendBidPeriod(
      _newPeriod: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
