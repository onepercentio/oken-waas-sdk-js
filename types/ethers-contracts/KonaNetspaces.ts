/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace KonaNetspaces {
  export type PropertyStruct = {
    firstResidence: PromiseOrValue<boolean>;
    lastValue: PromiseOrValue<BigNumberish>;
    lastValueDate: PromiseOrValue<BigNumberish>;
    hasPropertyRights: PromiseOrValue<boolean>;
    isResidential: PromiseOrValue<boolean>;
  };

  export type PropertyStructOutput = [
    boolean,
    BigNumber,
    BigNumber,
    boolean,
    boolean
  ] & {
    firstResidence: boolean;
    lastValue: BigNumber;
    lastValueDate: BigNumber;
    hasPropertyRights: boolean;
    isResidential: boolean;
  };
}

export interface KonaNetspacesInterface extends utils.Interface {
  functions: {
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "LIQUIDITY_PROVIDER_ROLE()": FunctionFragment;
    "PROPERTY_MANAGER_ROLE()": FunctionFragment;
    "addLiquidityInBrz(uint256)": FunctionFragment;
    "availableBrzInPool()": FunctionFragment;
    "cancelEscrow(address)": FunctionFragment;
    "escrows(address)": FunctionFragment;
    "executeLoan(address)": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "recoverETH(uint256)": FunctionFragment;
    "recoverTokens(uint256,address)": FunctionFragment;
    "removeBrzLiquidity(uint256)": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "repayLoan(address)": FunctionFragment;
    "requestRoll(address)": FunctionFragment;
    "respondToRoll(address,bool)": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "setPropertyInfo(address,bool,uint256,uint256,bool,bool)": FunctionFragment;
    "startEscrow(address,uint256)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "updateMinAmount(uint256)": FunctionFragment;
    "withdrawLoan(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "DEFAULT_ADMIN_ROLE"
      | "LIQUIDITY_PROVIDER_ROLE"
      | "PROPERTY_MANAGER_ROLE"
      | "addLiquidityInBrz"
      | "availableBrzInPool"
      | "cancelEscrow"
      | "escrows"
      | "executeLoan"
      | "getRoleAdmin"
      | "grantRole"
      | "hasRole"
      | "recoverETH"
      | "recoverTokens"
      | "removeBrzLiquidity"
      | "renounceRole"
      | "repayLoan"
      | "requestRoll"
      | "respondToRoll"
      | "revokeRole"
      | "setPropertyInfo"
      | "startEscrow"
      | "supportsInterface"
      | "updateMinAmount"
      | "withdrawLoan"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "LIQUIDITY_PROVIDER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PROPERTY_MANAGER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addLiquidityInBrz",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "availableBrzInPool",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "cancelEscrow",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "escrows",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "executeLoan",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "recoverETH",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "recoverTokens",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "removeBrzLiquidity",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "repayLoan",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "requestRoll",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "respondToRoll",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setPropertyInfo",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<boolean>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "startEscrow",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateMinAmount",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawLoan",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "LIQUIDITY_PROVIDER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PROPERTY_MANAGER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addLiquidityInBrz",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "availableBrzInPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelEscrow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "escrows", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "executeLoan",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "recoverETH", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "recoverTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeBrzLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "repayLoan", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "requestRoll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "respondToRoll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setPropertyInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "startEscrow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateMinAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawLoan",
    data: BytesLike
  ): Result;

  events: {
    "EscrowCancelled(address,address,uint256)": EventFragment;
    "EscrowStarted(address,address,uint256)": EventFragment;
    "LoanExecuted(address)": EventFragment;
    "LoanRepaid(address,uint256)": EventFragment;
    "LoanWithdrawn(address,uint256)": EventFragment;
    "PropertyInfoSet(address,uint256)": EventFragment;
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
    "RollRequested(address)": EventFragment;
    "RollResponded(address,bool)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "EscrowCancelled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EscrowStarted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LoanExecuted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LoanRepaid"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LoanWithdrawn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PropertyInfoSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RollRequested"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RollResponded"): EventFragment;
}

export interface EscrowCancelledEventObject {
  property: string;
  creator: string;
  amount: BigNumber;
}
export type EscrowCancelledEvent = TypedEvent<
  [string, string, BigNumber],
  EscrowCancelledEventObject
>;

export type EscrowCancelledEventFilter = TypedEventFilter<EscrowCancelledEvent>;

export interface EscrowStartedEventObject {
  property: string;
  creator: string;
  amount: BigNumber;
}
export type EscrowStartedEvent = TypedEvent<
  [string, string, BigNumber],
  EscrowStartedEventObject
>;

export type EscrowStartedEventFilter = TypedEventFilter<EscrowStartedEvent>;

export interface LoanExecutedEventObject {
  property: string;
}
export type LoanExecutedEvent = TypedEvent<[string], LoanExecutedEventObject>;

export type LoanExecutedEventFilter = TypedEventFilter<LoanExecutedEvent>;

export interface LoanRepaidEventObject {
  property: string;
  total: BigNumber;
}
export type LoanRepaidEvent = TypedEvent<
  [string, BigNumber],
  LoanRepaidEventObject
>;

export type LoanRepaidEventFilter = TypedEventFilter<LoanRepaidEvent>;

export interface LoanWithdrawnEventObject {
  property: string;
  loanAmount: BigNumber;
}
export type LoanWithdrawnEvent = TypedEvent<
  [string, BigNumber],
  LoanWithdrawnEventObject
>;

export type LoanWithdrawnEventFilter = TypedEventFilter<LoanWithdrawnEvent>;

export interface PropertyInfoSetEventObject {
  property: string;
  creditLimit: BigNumber;
}
export type PropertyInfoSetEvent = TypedEvent<
  [string, BigNumber],
  PropertyInfoSetEventObject
>;

export type PropertyInfoSetEventFilter = TypedEventFilter<PropertyInfoSetEvent>;

export interface RoleAdminChangedEventObject {
  role: string;
  previousAdminRole: string;
  newAdminRole: string;
}
export type RoleAdminChangedEvent = TypedEvent<
  [string, string, string],
  RoleAdminChangedEventObject
>;

export type RoleAdminChangedEventFilter =
  TypedEventFilter<RoleAdminChangedEvent>;

export interface RoleGrantedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleGrantedEvent = TypedEvent<
  [string, string, string],
  RoleGrantedEventObject
>;

export type RoleGrantedEventFilter = TypedEventFilter<RoleGrantedEvent>;

export interface RoleRevokedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleRevokedEvent = TypedEvent<
  [string, string, string],
  RoleRevokedEventObject
>;

export type RoleRevokedEventFilter = TypedEventFilter<RoleRevokedEvent>;

export interface RollRequestedEventObject {
  property: string;
}
export type RollRequestedEvent = TypedEvent<[string], RollRequestedEventObject>;

export type RollRequestedEventFilter = TypedEventFilter<RollRequestedEvent>;

export interface RollRespondedEventObject {
  property: string;
  accepted: boolean;
}
export type RollRespondedEvent = TypedEvent<
  [string, boolean],
  RollRespondedEventObject
>;

export type RollRespondedEventFilter = TypedEventFilter<RollRespondedEvent>;

export interface KonaNetspaces extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: KonaNetspacesInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    LIQUIDITY_PROVIDER_ROLE(overrides?: CallOverrides): Promise<[string]>;

    PROPERTY_MANAGER_ROLE(overrides?: CallOverrides): Promise<[string]>;

    addLiquidityInBrz(
      _total: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    availableBrzInPool(overrides?: CallOverrides): Promise<[BigNumber]>;

    cancelEscrow(
      _property: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    escrows(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [
        boolean,
        BigNumber,
        string,
        BigNumber,
        KonaNetspaces.PropertyStructOutput,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean
      ] & {
        enabled: boolean;
        createdOn: BigNumber;
        createdBy: string;
        amount: BigNumber;
        property: KonaNetspaces.PropertyStructOutput;
        creditLimit: BigNumber;
        withdrawnOn: BigNumber;
        maturity: BigNumber;
        totalPrincipal: BigNumber;
        totalInterests: BigNumber;
        rollRequested: boolean;
      }
    >;

    executeLoan(
      _property: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    recoverETH(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    recoverTokens(
      _amount: PromiseOrValue<BigNumberish>,
      _asset: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removeBrzLiquidity(
      _total: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    repayLoan(
      _property: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    requestRoll(
      _property: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    respondToRoll(
      _property: PromiseOrValue<string>,
      _accept: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPropertyInfo(
      _property: PromiseOrValue<string>,
      _firstResidence: PromiseOrValue<boolean>,
      _lastValue: PromiseOrValue<BigNumberish>,
      _lastValueDate: PromiseOrValue<BigNumberish>,
      _hasPropertyRights: PromiseOrValue<boolean>,
      _isResidential: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    startEscrow(
      _property: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    updateMinAmount(
      _minAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawLoan(
      _property: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  LIQUIDITY_PROVIDER_ROLE(overrides?: CallOverrides): Promise<string>;

  PROPERTY_MANAGER_ROLE(overrides?: CallOverrides): Promise<string>;

  addLiquidityInBrz(
    _total: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  availableBrzInPool(overrides?: CallOverrides): Promise<BigNumber>;

  cancelEscrow(
    _property: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  escrows(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [
      boolean,
      BigNumber,
      string,
      BigNumber,
      KonaNetspaces.PropertyStructOutput,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      boolean
    ] & {
      enabled: boolean;
      createdOn: BigNumber;
      createdBy: string;
      amount: BigNumber;
      property: KonaNetspaces.PropertyStructOutput;
      creditLimit: BigNumber;
      withdrawnOn: BigNumber;
      maturity: BigNumber;
      totalPrincipal: BigNumber;
      totalInterests: BigNumber;
      rollRequested: boolean;
    }
  >;

  executeLoan(
    _property: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getRoleAdmin(
    role: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  grantRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  hasRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  recoverETH(
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  recoverTokens(
    _amount: PromiseOrValue<BigNumberish>,
    _asset: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removeBrzLiquidity(
    _total: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  repayLoan(
    _property: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  requestRoll(
    _property: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  respondToRoll(
    _property: PromiseOrValue<string>,
    _accept: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  revokeRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPropertyInfo(
    _property: PromiseOrValue<string>,
    _firstResidence: PromiseOrValue<boolean>,
    _lastValue: PromiseOrValue<BigNumberish>,
    _lastValueDate: PromiseOrValue<BigNumberish>,
    _hasPropertyRights: PromiseOrValue<boolean>,
    _isResidential: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  startEscrow(
    _property: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  updateMinAmount(
    _minAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawLoan(
    _property: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    LIQUIDITY_PROVIDER_ROLE(overrides?: CallOverrides): Promise<string>;

    PROPERTY_MANAGER_ROLE(overrides?: CallOverrides): Promise<string>;

    addLiquidityInBrz(
      _total: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    availableBrzInPool(overrides?: CallOverrides): Promise<BigNumber>;

    cancelEscrow(
      _property: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    escrows(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [
        boolean,
        BigNumber,
        string,
        BigNumber,
        KonaNetspaces.PropertyStructOutput,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean
      ] & {
        enabled: boolean;
        createdOn: BigNumber;
        createdBy: string;
        amount: BigNumber;
        property: KonaNetspaces.PropertyStructOutput;
        creditLimit: BigNumber;
        withdrawnOn: BigNumber;
        maturity: BigNumber;
        totalPrincipal: BigNumber;
        totalInterests: BigNumber;
        rollRequested: boolean;
      }
    >;

    executeLoan(
      _property: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    recoverETH(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    recoverTokens(
      _amount: PromiseOrValue<BigNumberish>,
      _asset: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    removeBrzLiquidity(
      _total: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    repayLoan(
      _property: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    requestRoll(
      _property: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    respondToRoll(
      _property: PromiseOrValue<string>,
      _accept: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setPropertyInfo(
      _property: PromiseOrValue<string>,
      _firstResidence: PromiseOrValue<boolean>,
      _lastValue: PromiseOrValue<BigNumberish>,
      _lastValueDate: PromiseOrValue<BigNumberish>,
      _hasPropertyRights: PromiseOrValue<boolean>,
      _isResidential: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    startEscrow(
      _property: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    updateMinAmount(
      _minAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawLoan(
      _property: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "EscrowCancelled(address,address,uint256)"(
      property?: PromiseOrValue<string> | null,
      creator?: PromiseOrValue<string> | null,
      amount?: null
    ): EscrowCancelledEventFilter;
    EscrowCancelled(
      property?: PromiseOrValue<string> | null,
      creator?: PromiseOrValue<string> | null,
      amount?: null
    ): EscrowCancelledEventFilter;

    "EscrowStarted(address,address,uint256)"(
      property?: PromiseOrValue<string> | null,
      creator?: PromiseOrValue<string> | null,
      amount?: null
    ): EscrowStartedEventFilter;
    EscrowStarted(
      property?: PromiseOrValue<string> | null,
      creator?: PromiseOrValue<string> | null,
      amount?: null
    ): EscrowStartedEventFilter;

    "LoanExecuted(address)"(
      property?: PromiseOrValue<string> | null
    ): LoanExecutedEventFilter;
    LoanExecuted(
      property?: PromiseOrValue<string> | null
    ): LoanExecutedEventFilter;

    "LoanRepaid(address,uint256)"(
      property?: PromiseOrValue<string> | null,
      total?: null
    ): LoanRepaidEventFilter;
    LoanRepaid(
      property?: PromiseOrValue<string> | null,
      total?: null
    ): LoanRepaidEventFilter;

    "LoanWithdrawn(address,uint256)"(
      property?: PromiseOrValue<string> | null,
      loanAmount?: null
    ): LoanWithdrawnEventFilter;
    LoanWithdrawn(
      property?: PromiseOrValue<string> | null,
      loanAmount?: null
    ): LoanWithdrawnEventFilter;

    "PropertyInfoSet(address,uint256)"(
      property?: PromiseOrValue<string> | null,
      creditLimit?: null
    ): PropertyInfoSetEventFilter;
    PropertyInfoSet(
      property?: PromiseOrValue<string> | null,
      creditLimit?: null
    ): PropertyInfoSetEventFilter;

    "RoleAdminChanged(bytes32,bytes32,bytes32)"(
      role?: PromiseOrValue<BytesLike> | null,
      previousAdminRole?: PromiseOrValue<BytesLike> | null,
      newAdminRole?: PromiseOrValue<BytesLike> | null
    ): RoleAdminChangedEventFilter;
    RoleAdminChanged(
      role?: PromiseOrValue<BytesLike> | null,
      previousAdminRole?: PromiseOrValue<BytesLike> | null,
      newAdminRole?: PromiseOrValue<BytesLike> | null
    ): RoleAdminChangedEventFilter;

    "RoleGranted(bytes32,address,address)"(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleGrantedEventFilter;
    RoleGranted(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleGrantedEventFilter;

    "RoleRevoked(bytes32,address,address)"(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleRevokedEventFilter;
    RoleRevoked(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleRevokedEventFilter;

    "RollRequested(address)"(
      property?: PromiseOrValue<string> | null
    ): RollRequestedEventFilter;
    RollRequested(
      property?: PromiseOrValue<string> | null
    ): RollRequestedEventFilter;

    "RollResponded(address,bool)"(
      property?: PromiseOrValue<string> | null,
      accepted?: null
    ): RollRespondedEventFilter;
    RollResponded(
      property?: PromiseOrValue<string> | null,
      accepted?: null
    ): RollRespondedEventFilter;
  };

  estimateGas: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    LIQUIDITY_PROVIDER_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    PROPERTY_MANAGER_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    addLiquidityInBrz(
      _total: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    availableBrzInPool(overrides?: CallOverrides): Promise<BigNumber>;

    cancelEscrow(
      _property: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    escrows(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    executeLoan(
      _property: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    recoverETH(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    recoverTokens(
      _amount: PromiseOrValue<BigNumberish>,
      _asset: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    removeBrzLiquidity(
      _total: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    repayLoan(
      _property: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    requestRoll(
      _property: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    respondToRoll(
      _property: PromiseOrValue<string>,
      _accept: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPropertyInfo(
      _property: PromiseOrValue<string>,
      _firstResidence: PromiseOrValue<boolean>,
      _lastValue: PromiseOrValue<BigNumberish>,
      _lastValueDate: PromiseOrValue<BigNumberish>,
      _hasPropertyRights: PromiseOrValue<boolean>,
      _isResidential: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    startEscrow(
      _property: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    updateMinAmount(
      _minAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawLoan(
      _property: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    LIQUIDITY_PROVIDER_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    PROPERTY_MANAGER_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addLiquidityInBrz(
      _total: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    availableBrzInPool(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    cancelEscrow(
      _property: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    escrows(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    executeLoan(
      _property: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    recoverETH(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    recoverTokens(
      _amount: PromiseOrValue<BigNumberish>,
      _asset: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removeBrzLiquidity(
      _total: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    repayLoan(
      _property: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    requestRoll(
      _property: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    respondToRoll(
      _property: PromiseOrValue<string>,
      _accept: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPropertyInfo(
      _property: PromiseOrValue<string>,
      _firstResidence: PromiseOrValue<boolean>,
      _lastValue: PromiseOrValue<BigNumberish>,
      _lastValueDate: PromiseOrValue<BigNumberish>,
      _hasPropertyRights: PromiseOrValue<boolean>,
      _isResidential: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    startEscrow(
      _property: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    updateMinAmount(
      _minAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawLoan(
      _property: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
